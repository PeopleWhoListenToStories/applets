{"version":3,"file":"common.js","sources":["webpack:///./config.js","webpack:///./src/const/status.js","webpack:///./src/service/apiModules/user.js","webpack:///./src/service/request.js","webpack:///./src/store/index.js","webpack:///./src/store/modules/fingerprint.js","webpack:///./src/store/modules/location.js","webpack:///./src/store/modules/user.js","webpack:///./src/utils/QQMap.js","webpack:///./src/utils/tool.js"],"sourcesContent":["global.constants = {\n    website: 'https://humanweaknesses.com',\n    // website: 'http://127.0.0.1:7001',\n    name: '百度',\n};","export const HTTP_STATUS = {\n    SUCCESS: 200,\n    CLIENT_ERROR: 400,\n    AUTHENTICATE: 401,\n    FORBIDDEN: 403,\n    NOT_FOUND: 404,\n    SERVER_ERROR: 500,\n    BAD_GATEWAY: 502,\n    SERVICE_UNAVAILABLE: 503,\n    GATEWAY_TIMEOUT: 504\n}\n\n// promise status\nexport const SUCCESS = { success: 'success' }\nexport const FAIL = { fail: 'fail' }\nexport const COMPLETE = { complete: 'complete' }\n\nexport const PROMISE_STATUS = {\n    success: 'success',\n    fail: 'fail',\n    complete: 'complete'\n}\n\nexport const RESULT_STATUS = {\n    SUCCESS: 0,\n    SIGNATURE_FAILED: 1000  // 签名失败\n}","import request from \"../request\"\n\nexport const postLogin = (params) => {\n    return request.post('/api/user/login', params)\n}\n\n// 获取用户信息\nexport const getUserInfo = () => {\n    return request.get('/api/userInfo')\n}\n\n// 上传图片\nexport const postUpLoadImage = (params) => {\n    return request.post('/api/upload', params, 'multipart/form-data')\n}","import Taro from '@tarojs/taro'\nimport { HTTP_STATUS } from '../const/status'\nimport '../../config'\nimport { Toast } from '../utils/tool'\nimport stroe from \"../store/index\"\n\nconst authority = Taro.getStorageSync('authority')\n\nconst whileList = ['/api/user/login']\n\nexport default {\n    async baseOptions(params, method = 'GET') {\n        const { User } = stroe\n        let { url, data } = params\n        let authority = Taro.getStorageSync('authority')\n        // let token = getApp().globalData.token\n        if (!authority && !whileList.includes(params.url)) {\n            User.loginOut()\n            Taro.showModal({\n                title: '登陆语',\n                content: '未曾相逢先一笑',\n                success: function (res) {\n                    if (res.confirm) {\n                        console.log('用户点击确定')\n                        User.login()\n                    } else if (res.cancel) {\n                        console.log('用户点击取消')\n                        Taro.navigateTo({\n                            url: '/pages/notauthority/index'\n                        })\n                    }\n                }\n            })\n            return {\n                status: 401,\n                data: {}\n            }\n        }\n        Taro.checkSession({\n            success: function () {\n                console.log('ok 未过期，并且在本生命周期一直有效',)\n                //session_key 未过期，并且在本生命周期一直有效\n            },\n            fail: function () {\n                console.log('fail 已经失效，需要重新执行登录流程')\n                // session_key 已经失效，需要重新执行登录流程\n\n                // login() //重新登录\n            }\n        })\n        Taro.showLoading({\n            title: '正在加载',\n            mask: true\n        })\n        let contentType = 'application/x-www-form-urlencoded'\n        contentType = params.contentType || contentType\n        const option = {\n            // isShowLoading: true,\n            // loadingText: '正在加载',\n            url: global.constants.website + url,\n            data: data,\n            method: method,\n            header: { 'content-type': contentType, 'authority': Taro.getStorageSync('authority') },\n            success(res) {\n                Taro.hideLoading()\n                switch (res.data.status) {\n                    case HTTP_STATUS.AUTHENTICATE:\n                        Taro.switchTab({\n                            url: '/pages/my/index'\n                        })\n                        return Toast('当前用户已过期', null, 1000)\n                    case HTTP_STATUS.NOT_FOUND:\n                        return Toast('请求资源不存在', null, 1000)\n                    case HTTP_STATUS.BAD_GATEWAY:\n                        return Toast('服务端出现了问题', null, 1000)\n                    case HTTP_STATUS.FORBIDDEN:\n                        return Toast('没有权限访问', null, 1000)\n                    case HTTP_STATUS.SUCCESS:\n                        return res.data\n                    default:\n                        return Toast('其他错误', null, 1000)\n                }\n            },\n            error(e) {\n                Taro.hideLoading()\n                Toast('请求接口出现问题')\n            }\n        }\n        return Taro.request(option)\n    },\n    get(url, data = '') {\n        let option = { url, data }\n        return this.baseOptions(option)\n    },\n    post: function (url, data, contentType) {\n        let params = { url, data, contentType }\n        return this.baseOptions(params, 'POST')\n    },\n    put: function (url, data, contentType) {\n        let params = { url, data, contentType }\n        return this.baseOptions(params, 'PUT')\n    }\n}","import locationStore from './modules/location.js'\nimport userStore from './modules/user.js'\nimport FingerprintStore from \"./modules/fingerprint\"\nexport default {\n    Location: locationStore,\n    User: userStore,\n    Fingerprint: FingerprintStore\n}","import { observable } from 'mobx'\nimport Taro from \"@tarojs/taro\"\nimport UserStore from \"./user\"\nimport { Toast } from \"../../utils/tool\"\n\nconst FingerprintStore = observable({\n\n    FingerprintLogin() {\n        if (Taro.canIUse('checkIsSupportSoterAuthentication')) { // 检测当前微信版本是否支持调用指纹相关接口\n            Taro.checkIsSupportSoterAuthentication({\n                success(res) {\n                    // res.supportMode = [] 不具备任何被SOTER支持的生物识别方式\n                    // res.supportMode = ['fingerPrint'] 只支持指纹识别\n                    // res.supportMode = ['fingerPrint', 'facial'] 支持指纹识别和人脸识别\n                    if (res.supportMode.length !== 0) {\n                        Taro.checkIsSoterEnrolledInDevice({\n                            // supportMode.length > 1 ? supportMode[1] : supportMode[0]\n                            checkAuthMode: 'fingerPrint',\n                            success(res) {\n                                if (res.errMsg === 'checkIsSoterEnrolledInDevice:ok') {\n                                    Taro.startSoterAuthentication({\n                                        requestAuthModes: ['fingerPrint'],\n                                        challenge: '123456',\n                                        authContent: '请用指纹解锁',\n                                        success(res) {\n                                            if (res.errCode === 0) {\n                                                // verifySignature(res)\n                                                Toast('指纹验证成功', 'success', 1000)\n                                                UserStore.login()\n                                            } else {\n                                                Toast('验证失败', 'none', 1000)\n                                            }\n                                        }\n                                    })\n                                } else {\n                                    Toast('验证失败', 'none', 1000)\n                                }\n                                // console.log(res, \"fingerPrint\")// isEnrolled的值是0或者1，不知道是不是指纹个数或是Boolean\n                            }\n                        })\n                    } else {\n                        Toast('不具备识别', 'none', 1000)\n                    }\n                }\n            })\n        } else {\n            Toast('暂不支持指纹验', 'none', 1000)\n        }\n    },\n})\nexport default FingerprintStore","import { observable } from 'mobx'\n\nconst locationStore = observable({\n    startAddress: {},\n    endAddress: {},\n    currentAddress: {},\n\n    setStartAddress(params) {\n        this.startAddress = params\n    },\n\n    setEndAddress(params) {\n        this.endAddress = params\n    },\n    setCurrentAddress(params) {\n        this.currentAddress = params.toString()\n    }\n\n})\n\nexport default locationStore","import { observable } from 'mobx'\nimport Taro from \"@tarojs/taro\"\n\nimport { postLogin } from \"../../service/apiModules/user\"\n\nconst UserStore = observable({\n    userInfo: {},\n\n    setuserInfo(params) {\n        this.userInfo = params\n    },\n\n    login() {\n        Taro.login({\n            success: async function (res) {\n                if (res.code) {\n                    //发起网络请求\n                    const result = await postLogin({ code: res.code })\n                    if (result.data.status === 200) {\n                        Taro.setStorageSync(\"user_id\", result.data.openid)\n                        Taro.setStorageSync(\"authority\", result.data.Authority)\n                        Taro.switchTab({\n                            url: '/pages/index/index'\n                        })\n                    } else {\n                        Taro.showToast({\n                            title: result.message || '失败了',\n                            duration: 1000,\n                            icon: 'none',\n                            mask: false,\n                        })\n                    }\n\n                } else {\n                    Taro.removeStorageSync('user_id')\n                    Taro.removeStorageSync('authority')\n                    Taro.showToast({\n                        title: res.errMsg,\n                        duration: 2000,\n                        icon: 'none',\n                        mask: false,\n                    })\n                }\n            }\n        })\n    },\n\n    loginOut() {\n        Taro.removeStorageSync('user_id')\n        Taro.removeStorageSync('authority')\n    }\n})\n\nexport default UserStore","/**\n * 微信小程序JavaScriptSDK\n * \n * @version 1.2\n * @date 2019-03-06\n * @author v_ylyue@tencent.com\n */\n\nvar ERROR_CONF = {\n  KEY_ERR: 311,\n  KEY_ERR_MSG: 'key格式错误',\n  PARAM_ERR: 310,\n  PARAM_ERR_MSG: '请求参数信息有误',\n  SYSTEM_ERR: 600,\n  SYSTEM_ERR_MSG: '系统错误',\n  WX_ERR_CODE: 1000,\n  WX_OK_CODE: 200\n};\nvar BASE_URL = 'https://apis.map.qq.com/ws/';\nvar URL_SEARCH = BASE_URL + 'place/v1/search';\nvar URL_SUGGESTION = BASE_URL + 'place/v1/suggestion';\nvar URL_GET_GEOCODER = BASE_URL + 'geocoder/v1/';\nvar URL_CITY_LIST = BASE_URL + 'district/v1/list';\nvar URL_AREA_LIST = BASE_URL + 'district/v1/getchildren';\nvar URL_DISTANCE = BASE_URL + 'distance/v1/';\nvar URL_DIRECTION = BASE_URL + 'direction/v1/';\nvar MODE = {\n  driving: 'driving',\n  transit: 'transit'\n};\nvar EARTH_RADIUS = 6378136.49;\nvar Utils = {\n  /**\n  * md5加密方法\n  * 版权所有©2011 Sebastian Tschan，https：//blueimp.net\n  */\n  safeAdd(x, y) {\n    var lsw = (x & 0xffff) + (y & 0xffff);\n    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n    return (msw << 16) | (lsw & 0xffff);\n  },\n  bitRotateLeft(num, cnt) {\n    return (num << cnt) | (num >>> (32 - cnt));\n  },\n  md5cmn(q, a, b, x, s, t) {\n    return this.safeAdd(this.bitRotateLeft(this.safeAdd(this.safeAdd(a, q), this.safeAdd(x, t)), s), b);\n  },\n  md5ff(a, b, c, d, x, s, t) {\n    return this.md5cmn((b & c) | (~b & d), a, b, x, s, t);\n  },\n  md5gg(a, b, c, d, x, s, t) {\n    return this.md5cmn((b & d) | (c & ~d), a, b, x, s, t);\n  },\n  md5hh(a, b, c, d, x, s, t) {\n    return this.md5cmn(b ^ c ^ d, a, b, x, s, t);\n  },\n  md5ii(a, b, c, d, x, s, t) {\n    return this.md5cmn(c ^ (b | ~d), a, b, x, s, t);\n  },\n  binlMD5(x, len) {\n    /* append padding */\n    x[len >> 5] |= 0x80 << (len % 32);\n    x[((len + 64) >>> 9 << 4) + 14] = len;\n\n    var i;\n    var olda;\n    var oldb;\n    var oldc;\n    var oldd;\n    var a = 1732584193;\n    var b = -271733879;\n    var c = -1732584194;\n    var d = 271733878;\n\n    for (i = 0; i < x.length; i += 16) {\n      olda = a;\n      oldb = b;\n      oldc = c;\n      oldd = d;\n\n      a = this.md5ff(a, b, c, d, x[i], 7, -680876936);\n      d = this.md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n      c = this.md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n      b = this.md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n      a = this.md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n      d = this.md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n      c = this.md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n      b = this.md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n      a = this.md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n      d = this.md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n      c = this.md5ff(c, d, a, b, x[i + 10], 17, -42063);\n      b = this.md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n      a = this.md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n      d = this.md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n      c = this.md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n      b = this.md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n\n      a = this.md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n      d = this.md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n      c = this.md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n      b = this.md5gg(b, c, d, a, x[i], 20, -373897302);\n      a = this.md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n      d = this.md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n      c = this.md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n      b = this.md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n      a = this.md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n      d = this.md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n      c = this.md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n      b = this.md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n      a = this.md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n      d = this.md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n      c = this.md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n      b = this.md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n\n      a = this.md5hh(a, b, c, d, x[i + 5], 4, -378558);\n      d = this.md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n      c = this.md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n      b = this.md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n      a = this.md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n      d = this.md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n      c = this.md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n      b = this.md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n      a = this.md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n      d = this.md5hh(d, a, b, c, x[i], 11, -358537222);\n      c = this.md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n      b = this.md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n      a = this.md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n      d = this.md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n      c = this.md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n      b = this.md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n\n      a = this.md5ii(a, b, c, d, x[i], 6, -198630844);\n      d = this.md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n      c = this.md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n      b = this.md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n      a = this.md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n      d = this.md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n      c = this.md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n      b = this.md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n      a = this.md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n      d = this.md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n      c = this.md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n      b = this.md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n      a = this.md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n      d = this.md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n      c = this.md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n      b = this.md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n\n      a = this.safeAdd(a, olda);\n      b = this.safeAdd(b, oldb);\n      c = this.safeAdd(c, oldc);\n      d = this.safeAdd(d, oldd);\n    }\n    return [a, b, c, d];\n  },\n  binl2rstr(input) {\n    var i;\n    var output = '';\n    var length32 = input.length * 32;\n    for (i = 0; i < length32; i += 8) {\n      output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xff);\n    }\n    return output;\n  },\n  rstr2binl(input) {\n    var i;\n    var output = [];\n    output[(input.length >> 2) - 1] = undefined;\n    for (i = 0; i < output.length; i += 1) {\n      output[i] = 0;\n    }\n    var length8 = input.length * 8;\n    for (i = 0; i < length8; i += 8) {\n      output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << (i % 32);\n    }\n    return output;\n  },\n  rstrMD5(s) {\n    return this.binl2rstr(this.binlMD5(this.rstr2binl(s), s.length * 8));\n  },\n  rstrHMACMD5(key, data) {\n    var i;\n    var bkey = this.rstr2binl(key);\n    var ipad = [];\n    var opad = [];\n    var hash;\n    ipad[15] = opad[15] = undefined;\n    if (bkey.length > 16) {\n      bkey = this.binlMD5(bkey, key.length * 8);\n    }\n    for (i = 0; i < 16; i += 1) {\n      ipad[i] = bkey[i] ^ 0x36363636;\n      opad[i] = bkey[i] ^ 0x5c5c5c5c;\n    }\n    hash = this.binlMD5(ipad.concat(this.rstr2binl(data)), 512 + data.length * 8);\n    return this.binl2rstr(this.binlMD5(opad.concat(hash), 512 + 128));\n  },\n  rstr2hex(input) {\n    var hexTab = '0123456789abcdef';\n    var output = '';\n    var x;\n    var i;\n    for (i = 0; i < input.length; i += 1) {\n      x = input.charCodeAt(i);\n      output += hexTab.charAt((x >>> 4) & 0x0f) + hexTab.charAt(x & 0x0f);\n    }\n    return output;\n  },\n  str2rstrUTF8(input) {\n    return unescape(encodeURIComponent(input));\n  },\n  rawMD5(s) {\n    return this.rstrMD5(this.str2rstrUTF8(s));\n  },\n  hexMD5(s) {\n    return this.rstr2hex(this.rawMD5(s));\n  },\n  rawHMACMD5(k, d) {\n    return this.rstrHMACMD5(this.str2rstrUTF8(k), str2rstrUTF8(d));\n  },\n  hexHMACMD5(k, d) {\n    return this.rstr2hex(this.rawHMACMD5(k, d));\n  },\n\n  md5(string, key, raw) {\n    if (!key) {\n      if (!raw) {\n        return this.hexMD5(string);\n      }\n      return this.rawMD5(string);\n    }\n    if (!raw) {\n      return this.hexHMACMD5(key, string);\n    }\n    return this.rawHMACMD5(key, string);\n  },\n  /**\n   * 得到md5加密后的sig参数\n   * @param {Object} requestParam 接口参数\n   * @param {String} sk签名字符串\n   * @param {String} featrue 方法名\n   * @return 返回加密后的sig参数\n   */\n  getSig(requestParam, sk, feature, mode) {\n    var sig = null;\n    var requestArr = [];\n    Object.keys(requestParam).sort().forEach(function (key) {\n      requestArr.push(key + '=' + requestParam[key]);\n    });\n    if (feature == 'search') {\n      sig = '/ws/place/v1/search?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'suggest') {\n      sig = '/ws/place/v1/suggestion?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'reverseGeocoder') {\n      sig = '/ws/geocoder/v1/?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'geocoder') {\n      sig = '/ws/geocoder/v1/?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'getCityList') {\n      sig = '/ws/district/v1/list?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'getDistrictByCityId') {\n      sig = '/ws/district/v1/getchildren?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'calculateDistance') {\n      sig = '/ws/distance/v1/?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'direction') {\n      sig = '/ws/direction/v1/' + mode + '?' + requestArr.join('&') + sk;\n    }\n    sig = this.md5(sig);\n    return sig;\n  },\n  /**\n   * 得到终点query字符串\n   * @param {Array|String} 检索数据\n   */\n  location2query(data) {\n    if (typeof data == 'string') {\n      return data;\n    }\n    var query = '';\n    for (var i = 0; i < data.length; i++) {\n      var d = data[i];\n      if (!!query) {\n        query += ';';\n      }\n      if (d.location) {\n        query = query + d.location.lat + ',' + d.location.lng;\n      }\n      if (d.latitude && d.longitude) {\n        query = query + d.latitude + ',' + d.longitude;\n      }\n    }\n    return query;\n  },\n\n  /**\n   * 计算角度\n   */\n  rad(d) {\n    return d * Math.PI / 180.0;\n  },\n  /**\n   * 处理终点location数组\n   * @return 返回终点数组\n   */\n  getEndLocation(location) {\n    var to = location.split(';');\n    var endLocation = [];\n    for (var i = 0; i < to.length; i++) {\n      endLocation.push({\n        lat: parseFloat(to[i].split(',')[0]),\n        lng: parseFloat(to[i].split(',')[1])\n      })\n    }\n    return endLocation;\n  },\n\n  /**\n   * 计算两点间直线距离\n   * @param a 表示纬度差\n   * @param b 表示经度差\n   * @return 返回的是距离，单位m\n   */\n  getDistance(latFrom, lngFrom, latTo, lngTo) {\n    var radLatFrom = this.rad(latFrom);\n    var radLatTo = this.rad(latTo);\n    var a = radLatFrom - radLatTo;\n    var b = this.rad(lngFrom) - this.rad(lngTo);\n    var distance = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) + Math.cos(radLatFrom) * Math.cos(radLatTo) * Math.pow(Math.sin(b / 2), 2)));\n    distance = distance * EARTH_RADIUS;\n    distance = Math.round(distance * 10000) / 10000;\n    return parseFloat(distance.toFixed(0));\n  },\n  /**\n   * 使用微信接口进行定位\n   */\n  getWXLocation(success, fail, complete) {\n    wx.getLocation({\n      type: 'gcj02',\n      success: success,\n      fail: fail,\n      complete: complete\n    });\n  },\n\n  /**\n   * 获取location参数\n   */\n  getLocationParam(location) {\n    if (typeof location == 'string') {\n      var locationArr = location.split(',');\n      if (locationArr.length === 2) {\n        location = {\n          latitude: location.split(',')[0],\n          longitude: location.split(',')[1]\n        };\n      } else {\n        location = {};\n      }\n    }\n    return location;\n  },\n\n  /**\n   * 回调函数默认处理\n   */\n  polyfillParam(param) {\n    param.success = param.success || function () { };\n    param.fail = param.fail || function () { };\n    param.complete = param.complete || function () { };\n  },\n\n  /**\n   * 验证param对应的key值是否为空\n   * \n   * @param {Object} param 接口参数\n   * @param {String} key 对应参数的key\n   */\n  checkParamKeyEmpty(param, key) {\n    if (!param[key]) {\n      var errconf = this.buildErrorConfig(ERROR_CONF.PARAM_ERR, ERROR_CONF.PARAM_ERR_MSG + key + '参数格式有误');\n      param.fail(errconf);\n      param.complete(errconf);\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * 验证参数中是否存在检索词keyword\n   * \n   * @param {Object} param 接口参数\n   */\n  checkKeyword(param) {\n    return !this.checkParamKeyEmpty(param, 'keyword');\n  },\n\n  /**\n   * 验证location值\n   * \n   * @param {Object} param 接口参数\n   */\n  checkLocation(param) {\n    var location = this.getLocationParam(param.location);\n    if (!location || !location.latitude || !location.longitude) {\n      var errconf = this.buildErrorConfig(ERROR_CONF.PARAM_ERR, ERROR_CONF.PARAM_ERR_MSG + ' location参数格式有误');\n      param.fail(errconf);\n      param.complete(errconf);\n      return false;\n    }\n    return true;\n  },\n\n  /**\n   * 构造错误数据结构\n   * @param {Number} errCode 错误码\n   * @param {Number} errMsg 错误描述\n   */\n  buildErrorConfig(errCode, errMsg) {\n    return {\n      status: errCode,\n      message: errMsg\n    };\n  },\n\n  /**\n   * \n   * 数据处理函数\n   * 根据传入参数不同处理不同数据\n   * @param {String} feature 功能名称\n   * search 地点搜索\n   * suggest关键词提示\n   * reverseGeocoder逆地址解析\n   * geocoder地址解析\n   * getCityList获取城市列表：父集\n   * getDistrictByCityId获取区县列表：子集\n   * calculateDistance距离计算\n   * @param {Object} param 接口参数\n   * @param {Object} data 数据\n   */\n  handleData(param, data, feature) {\n    if (feature == 'search') {\n      var searchResult = data.data;\n      var searchSimplify = [];\n      for (var i = 0; i < searchResult.length; i++) {\n        searchSimplify.push({\n          id: searchResult[i].id || null,\n          title: searchResult[i].title || null,\n          latitude: searchResult[i].location && searchResult[i].location.lat || null,\n          longitude: searchResult[i].location && searchResult[i].location.lng || null,\n          address: searchResult[i].address || null,\n          category: searchResult[i].category || null,\n          tel: searchResult[i].tel || null,\n          adcode: searchResult[i].ad_info && searchResult[i].ad_info.adcode || null,\n          city: searchResult[i].ad_info && searchResult[i].ad_info.city || null,\n          district: searchResult[i].ad_info && searchResult[i].ad_info.district || null,\n          province: searchResult[i].ad_info && searchResult[i].ad_info.province || null\n        })\n      }\n      param.success(data, {\n        searchResult: searchResult,\n        searchSimplify: searchSimplify\n      })\n    } else if (feature == 'suggest') {\n      var suggestResult = data.data;\n      var suggestSimplify = [];\n      for (var i = 0; i < suggestResult.length; i++) {\n        suggestSimplify.push({\n          adcode: suggestResult[i].adcode || null,\n          address: suggestResult[i].address || null,\n          category: suggestResult[i].category || null,\n          city: suggestResult[i].city || null,\n          district: suggestResult[i].district || null,\n          id: suggestResult[i].id || null,\n          latitude: suggestResult[i].location && suggestResult[i].location.lat || null,\n          longitude: suggestResult[i].location && suggestResult[i].location.lng || null,\n          province: suggestResult[i].province || null,\n          title: suggestResult[i].title || null,\n          type: suggestResult[i].type || null\n        })\n      }\n      param.success(data, {\n        suggestResult: suggestResult,\n        suggestSimplify: suggestSimplify\n      })\n    } else if (feature == 'reverseGeocoder') {\n      var reverseGeocoderResult = data.result;\n      var reverseGeocoderSimplify = {\n        address: reverseGeocoderResult.address || null,\n        latitude: reverseGeocoderResult.location && reverseGeocoderResult.location.lat || null,\n        longitude: reverseGeocoderResult.location && reverseGeocoderResult.location.lng || null,\n        adcode: reverseGeocoderResult.ad_info && reverseGeocoderResult.ad_info.adcode || null,\n        city: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.city || null,\n        district: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.district || null,\n        nation: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.nation || null,\n        province: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.province || null,\n        street: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.street || null,\n        street_number: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.street_number || null,\n        recommend: reverseGeocoderResult.formatted_addresses && reverseGeocoderResult.formatted_addresses.recommend || null,\n        rough: reverseGeocoderResult.formatted_addresses && reverseGeocoderResult.formatted_addresses.rough || null\n      };\n      if (reverseGeocoderResult.pois) {//判断是否返回周边poi\n        var pois = reverseGeocoderResult.pois;\n        var poisSimplify = [];\n        for (var i = 0; i < pois.length; i++) {\n          poisSimplify.push({\n            id: pois[i].id || null,\n            title: pois[i].title || null,\n            latitude: pois[i].location && pois[i].location.lat || null,\n            longitude: pois[i].location && pois[i].location.lng || null,\n            address: pois[i].address || null,\n            category: pois[i].category || null,\n            adcode: pois[i].ad_info && pois[i].ad_info.adcode || null,\n            city: pois[i].ad_info && pois[i].ad_info.city || null,\n            district: pois[i].ad_info && pois[i].ad_info.district || null,\n            province: pois[i].ad_info && pois[i].ad_info.province || null\n          })\n        }\n        param.success(data, {\n          reverseGeocoderResult: reverseGeocoderResult,\n          reverseGeocoderSimplify: reverseGeocoderSimplify,\n          pois: pois,\n          poisSimplify: poisSimplify\n        })\n      } else {\n        param.success(data, {\n          reverseGeocoderResult: reverseGeocoderResult,\n          reverseGeocoderSimplify: reverseGeocoderSimplify\n        })\n      }\n    } else if (feature == 'geocoder') {\n      var geocoderResult = data.result;\n      var geocoderSimplify = {\n        title: geocoderResult.title || null,\n        latitude: geocoderResult.location && geocoderResult.location.lat || null,\n        longitude: geocoderResult.location && geocoderResult.location.lng || null,\n        adcode: geocoderResult.ad_info && geocoderResult.ad_info.adcode || null,\n        province: geocoderResult.address_components && geocoderResult.address_components.province || null,\n        city: geocoderResult.address_components && geocoderResult.address_components.city || null,\n        district: geocoderResult.address_components && geocoderResult.address_components.district || null,\n        street: geocoderResult.address_components && geocoderResult.address_components.street || null,\n        street_number: geocoderResult.address_components && geocoderResult.address_components.street_number || null,\n        level: geocoderResult.level || null\n      };\n      param.success(data, {\n        geocoderResult: geocoderResult,\n        geocoderSimplify: geocoderSimplify\n      });\n    } else if (feature == 'getCityList') {\n      var provinceResult = data.result[0];\n      var cityResult = data.result[1];\n      var districtResult = data.result[2];\n      param.success(data, {\n        provinceResult: provinceResult,\n        cityResult: cityResult,\n        districtResult: districtResult\n      });\n    } else if (feature == 'getDistrictByCityId') {\n      var districtByCity = data.result[0];\n      param.success(data, districtByCity);\n    } else if (feature == 'calculateDistance') {\n      var calculateDistanceResult = data.result.elements;\n      var distance = [];\n      for (var i = 0; i < calculateDistanceResult.length; i++) {\n        distance.push(calculateDistanceResult[i].distance);\n      }\n      param.success(data, {\n        calculateDistanceResult: calculateDistanceResult,\n        distance: distance\n      });\n    } else if (feature == 'direction') {\n      var direction = data.result.routes;\n      param.success(data, direction);\n    } else {\n      param.success(data);\n    }\n  },\n\n  /**\n   * 构造微信请求参数，公共属性处理\n   * \n   * @param {Object} param 接口参数\n   * @param {Object} param 配置项\n   * @param {String} feature 方法名\n   */\n  buildWxRequestConfig(param, options, feature) {\n    var that = this;\n    options.header = { \"content-type\": \"application/json\" };\n    options.method = 'GET';\n    options.success = function (res) {\n      var data = res.data;\n      if (data.status === 0) {\n        that.handleData(param, data, feature);\n      } else {\n        param.fail(data);\n      }\n    };\n    options.fail = function (res) {\n      res.statusCode = ERROR_CONF.WX_ERR_CODE;\n      param.fail(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, res.errMsg));\n    };\n    options.complete = function (res) {\n      var statusCode = +res.statusCode;\n      switch (statusCode) {\n        case ERROR_CONF.WX_ERR_CODE: {\n          param.complete(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, res.errMsg));\n          break;\n        }\n        case ERROR_CONF.WX_OK_CODE: {\n          var data = res.data;\n          if (data.status === 0) {\n            param.complete(data);\n          } else {\n            param.complete(that.buildErrorConfig(data.status, data.message));\n          }\n          break;\n        }\n        default: {\n          param.complete(that.buildErrorConfig(ERROR_CONF.SYSTEM_ERR, ERROR_CONF.SYSTEM_ERR_MSG));\n        }\n\n      }\n    };\n    return options;\n  },\n\n  /**\n   * 处理用户参数是否传入坐标进行不同的处理\n   */\n  locationProcess(param, locationsuccess, locationfail, locationcomplete) {\n    var that = this;\n    locationfail = locationfail || function (res) {\n      res.statusCode = ERROR_CONF.WX_ERR_CODE;\n      param.fail(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, res.errMsg));\n    };\n    locationcomplete = locationcomplete || function (res) {\n      if (res.statusCode == ERROR_CONF.WX_ERR_CODE) {\n        param.complete(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, res.errMsg));\n      }\n    };\n    if (!param.location) {\n      that.getWXLocation(locationsuccess, locationfail, locationcomplete);\n    } else if (that.checkLocation(param)) {\n      var location = Utils.getLocationParam(param.location);\n      locationsuccess(location);\n    }\n  }\n};\n\n\nclass QQMapWX {\n\n  /**\n   * 构造函数\n   * \n   * @param {Object} options 接口参数,key 为必选参数\n   */\n  constructor(options) {\n    if (!options.key) {\n      throw Error('key值不能为空');\n    }\n    this.key = options.key;\n  };\n\n  /**\n   * POI周边检索\n   *\n   * @param {Object} options 接口参数对象\n   * \n   * 参数对象结构可以参考\n   * @see http://lbs.qq.com/webservice_v1/guide-search.html\n   */\n  search(options) {\n    var that = this;\n    options = options || {};\n\n    Utils.polyfillParam(options);\n\n    if (!Utils.checkKeyword(options)) {\n      return;\n    }\n\n    var requestParam = {\n      keyword: options.keyword,\n      orderby: options.orderby || '_distance',\n      page_size: options.page_size || 10,\n      page_index: options.page_index || 1,\n      output: 'json',\n      key: that.key\n    };\n\n    if (options.address_format) {\n      requestParam.address_format = options.address_format;\n    }\n\n    if (options.filter) {\n      requestParam.filter = options.filter;\n    }\n\n    var distance = options.distance || \"1000\";\n    var auto_extend = options.auto_extend || 1;\n    var region = null;\n    var rectangle = null;\n\n    //判断城市限定参数\n    if (options.region) {\n      region = options.region;\n    }\n\n    //矩形限定坐标(暂时只支持字符串格式)\n    if (options.rectangle) {\n      rectangle = options.rectangle;\n    }\n\n    var locationsuccess = function (result) {\n      if (region && !rectangle) {\n        //城市限定参数拼接\n        requestParam.boundary = \"region(\" + region + \",\" + auto_extend + \",\" + result.latitude + \",\" + result.longitude + \")\";\n        if (options.sig) {\n          requestParam.sig = Utils.getSig(requestParam, options.sig, 'search');\n        }\n      } else if (rectangle && !region) {\n        //矩形搜索\n        requestParam.boundary = \"rectangle(\" + rectangle + \")\";\n        if (options.sig) {\n          requestParam.sig = Utils.getSig(requestParam, options.sig, 'search');\n        }\n      } else {\n        requestParam.boundary = \"nearby(\" + result.latitude + \",\" + result.longitude + \",\" + distance + \",\" + auto_extend + \")\";\n        if (options.sig) {\n          requestParam.sig = Utils.getSig(requestParam, options.sig, 'search');\n        }\n      }\n      wx.request(Utils.buildWxRequestConfig(options, {\n        url: URL_SEARCH,\n        data: requestParam\n      }, 'search'));\n    };\n    Utils.locationProcess(options, locationsuccess);\n  };\n\n  /**\n   * sug模糊检索\n   *\n   * @param {Object} options 接口参数对象\n   * \n   * 参数对象结构可以参考\n   * http://lbs.qq.com/webservice_v1/guide-suggestion.html\n   */\n  getSuggestion(options) {\n    var that = this;\n    options = options || {};\n    Utils.polyfillParam(options);\n\n    if (!Utils.checkKeyword(options)) {\n      return;\n    }\n\n    var requestParam = {\n      keyword: options.keyword,\n      region: options.region || '全国',\n      region_fix: options.region_fix || 0,\n      policy: options.policy || 0,\n      page_size: options.page_size || 10,//控制显示条数\n      page_index: options.page_index || 1,//控制页数\n      get_subpois: options.get_subpois || 0,//返回子地点\n      output: 'json',\n      key: that.key\n    };\n    //长地址\n    if (options.address_format) {\n      requestParam.address_format = options.address_format;\n    }\n    //过滤\n    if (options.filter) {\n      requestParam.filter = options.filter;\n    }\n    //排序\n    if (options.location) {\n      var locationsuccess = function (result) {\n        requestParam.location = result.latitude + ',' + result.longitude;\n        if (options.sig) {\n          requestParam.sig = Utils.getSig(requestParam, options.sig, 'suggest');\n        }\n        wx.request(Utils.buildWxRequestConfig(options, {\n          url: URL_SUGGESTION,\n          data: requestParam\n        }, \"suggest\"));\n      };\n      Utils.locationProcess(options, locationsuccess);\n    } else {\n      if (options.sig) {\n        requestParam.sig = Utils.getSig(requestParam, options.sig, 'suggest');\n      }\n      wx.request(Utils.buildWxRequestConfig(options, {\n        url: URL_SUGGESTION,\n        data: requestParam\n      }, \"suggest\"));\n    }\n  };\n\n  /**\n   * 逆地址解析\n   *\n   * @param {Object} options 接口参数对象\n   * \n   * 请求参数结构可以参考\n   * http://lbs.qq.com/webservice_v1/guide-gcoder.html\n   */\n  reverseGeocoder(options) {\n    var that = this;\n    options = options || {};\n    Utils.polyfillParam(options);\n    var requestParam = {\n      coord_type: options.coord_type || 5,\n      get_poi: options.get_poi || 0,\n      output: 'json',\n      key: that.key\n    };\n    if (options.poi_options) {\n      requestParam.poi_options = options.poi_options\n    }\n\n    var locationsuccess = function (result) {\n      requestParam.location = result.latitude + ',' + result.longitude;\n      if (options.sig) {\n        requestParam.sig = Utils.getSig(requestParam, options.sig, 'reverseGeocoder');\n      }\n      wx.request(Utils.buildWxRequestConfig(options, {\n        url: URL_GET_GEOCODER,\n        data: requestParam\n      }, 'reverseGeocoder'));\n    };\n    Utils.locationProcess(options, locationsuccess);\n  };\n\n  /**\n   * 地址解析\n   *\n   * @param {Object} options 接口参数对象\n   * \n   * 请求参数结构可以参考\n   * http://lbs.qq.com/webservice_v1/guide-geocoder.html\n   */\n  geocoder(options) {\n    var that = this;\n    options = options || {};\n    Utils.polyfillParam(options);\n\n    if (Utils.checkParamKeyEmpty(options, 'address')) {\n      return;\n    }\n\n    var requestParam = {\n      address: options.address,\n      output: 'json',\n      key: that.key\n    };\n\n    //城市限定\n    if (options.region) {\n      requestParam.region = options.region;\n    }\n\n    if (options.sig) {\n      requestParam.sig = Utils.getSig(requestParam, options.sig, 'geocoder');\n    }\n\n    wx.request(Utils.buildWxRequestConfig(options, {\n      url: URL_GET_GEOCODER,\n      data: requestParam\n    }, 'geocoder'));\n  };\n\n\n  /**\n   * 获取城市列表\n   *\n   * @param {Object} options 接口参数对象\n   * \n   * 请求参数结构可以参考\n   * http://lbs.qq.com/webservice_v1/guide-region.html\n   */\n  getCityList(options) {\n    var that = this;\n    options = options || {};\n    Utils.polyfillParam(options);\n    var requestParam = {\n      output: 'json',\n      key: that.key\n    };\n\n    if (options.sig) {\n      requestParam.sig = Utils.getSig(requestParam, options.sig, 'getCityList');\n    }\n\n    wx.request(Utils.buildWxRequestConfig(options, {\n      url: URL_CITY_LIST,\n      data: requestParam\n    }, 'getCityList'));\n  };\n\n  /**\n   * 获取对应城市ID的区县列表\n   *\n   * @param {Object} options 接口参数对象\n   * \n   * 请求参数结构可以参考\n   * http://lbs.qq.com/webservice_v1/guide-region.html\n   */\n  getDistrictByCityId(options) {\n    var that = this;\n    options = options || {};\n    Utils.polyfillParam(options);\n\n    if (Utils.checkParamKeyEmpty(options, 'id')) {\n      return;\n    }\n\n    var requestParam = {\n      id: options.id || '',\n      output: 'json',\n      key: that.key\n    };\n\n    if (options.sig) {\n      requestParam.sig = Utils.getSig(requestParam, options.sig, 'getDistrictByCityId');\n    }\n\n    wx.request(Utils.buildWxRequestConfig(options, {\n      url: URL_AREA_LIST,\n      data: requestParam\n    }, 'getDistrictByCityId'));\n  };\n\n  /**\n   * 用于单起点到多终点的路线距离(非直线距离)计算：\n   * 支持两种距离计算方式：步行和驾车。\n   * 起点到终点最大限制直线距离10公里。\n   *\n   * 新增直线距离计算。\n   * \n   * @param {Object} options 接口参数对象\n   * \n   * 请求参数结构可以参考\n   * http://lbs.qq.com/webservice_v1/guide-distance.html\n   */\n  calculateDistance(options) {\n    var that = this;\n    options = options || {};\n    Utils.polyfillParam(options);\n\n    if (Utils.checkParamKeyEmpty(options, 'to')) {\n      return;\n    }\n\n    var requestParam = {\n      mode: options.mode || 'walking',\n      to: Utils.location2query(options.to),\n      output: 'json',\n      key: that.key\n    };\n\n    if (options.from) {\n      options.location = options.from;\n    }\n\n    //计算直线距离\n    if (requestParam.mode == 'straight') {\n      var locationsuccess = function (result) {\n        var locationTo = Utils.getEndLocation(requestParam.to);//处理终点坐标\n        var data = {\n          message: \"query ok\",\n          result: {\n            elements: []\n          },\n          status: 0\n        };\n        for (var i = 0; i < locationTo.length; i++) {\n          data.result.elements.push({//将坐标存入\n            distance: Utils.getDistance(result.latitude, result.longitude, locationTo[i].lat, locationTo[i].lng),\n            duration: 0,\n            from: {\n              lat: result.latitude,\n              lng: result.longitude\n            },\n            to: {\n              lat: locationTo[i].lat,\n              lng: locationTo[i].lng\n            }\n          });\n        }\n        var calculateResult = data.result.elements;\n        var distanceResult = [];\n        for (var i = 0; i < calculateResult.length; i++) {\n          distanceResult.push(calculateResult[i].distance);\n        }\n        return options.success(data, {\n          calculateResult: calculateResult,\n          distanceResult: distanceResult\n        });\n      };\n\n      Utils.locationProcess(options, locationsuccess);\n    } else {\n      var locationsuccess = function (result) {\n        requestParam.from = result.latitude + ',' + result.longitude;\n        if (options.sig) {\n          requestParam.sig = Utils.getSig(requestParam, options.sig, 'calculateDistance');\n        }\n        wx.request(Utils.buildWxRequestConfig(options, {\n          url: URL_DISTANCE,\n          data: requestParam\n        }, 'calculateDistance'));\n      };\n\n      Utils.locationProcess(options, locationsuccess);\n    }\n  };\n\n  /**\n   * 路线规划：\n   * \n   * @param {Object} options 接口参数对象\n   * \n   * 请求参数结构可以参考\n   * https://lbs.qq.com/webservice_v1/guide-road.html\n   */\n  direction(options) {\n    var that = this;\n    options = options || {};\n    Utils.polyfillParam(options);\n\n    if (Utils.checkParamKeyEmpty(options, 'to')) {\n      return;\n    }\n\n    var requestParam = {\n      output: 'json',\n      key: that.key\n    };\n\n    //to格式处理\n    if (typeof options.to == 'string') {\n      requestParam.to = options.to;\n    } else {\n      requestParam.to = options.to.latitude + ',' + options.to.longitude;\n    }\n    //初始化局部请求域名\n    var SET_URL_DIRECTION = null;\n    //设置默认mode属性\n    options.mode = options.mode || MODE.driving;\n\n    //设置请求域名\n    SET_URL_DIRECTION = URL_DIRECTION + options.mode;\n\n    if (options.from) {\n      options.location = options.from;\n    }\n\n    if (options.mode == MODE.driving) {\n      if (options.from_poi) {\n        requestParam.from_poi = options.from_poi;\n      }\n      if (options.heading) {\n        requestParam.heading = options.heading;\n      }\n      if (options.speed) {\n        requestParam.speed = options.speed;\n      }\n      if (options.accuracy) {\n        requestParam.accuracy = options.accuracy;\n      }\n      if (options.road_type) {\n        requestParam.road_type = options.road_type;\n      }\n      if (options.to_poi) {\n        requestParam.to_poi = options.to_poi;\n      }\n      if (options.from_track) {\n        requestParam.from_track = options.from_track;\n      }\n      if (options.waypoints) {\n        requestParam.waypoints = options.waypoints;\n      }\n      if (options.policy) {\n        requestParam.policy = options.policy;\n      }\n      if (options.plate_number) {\n        requestParam.plate_number = options.plate_number;\n      }\n    }\n\n    if (options.mode == MODE.transit) {\n      if (options.departure_time) {\n        requestParam.departure_time = options.departure_time;\n      }\n      if (options.policy) {\n        requestParam.policy = options.policy;\n      }\n    }\n\n    var locationsuccess = function (result) {\n      requestParam.from = result.latitude + ',' + result.longitude;\n      if (options.sig) {\n        requestParam.sig = Utils.getSig(requestParam, options.sig, 'direction', options.mode);\n      }\n      wx.request(Utils.buildWxRequestConfig(options, {\n        url: SET_URL_DIRECTION,\n        data: requestParam\n      }, 'direction'));\n    };\n\n    Utils.locationProcess(options, locationsuccess);\n  }\n};\n\nexport default new QQMapWX({ key: 'B46BZ-TDXKW-Q5WRQ-OIKGT-UCW4K-6QBXD' });","import Taro from \"@tarojs/taro\"\n\nexport const promisify = (func, ctx) => {\n    // 返回一个新的function\n    return function () {\n        // 初始化this作用域\n        var ctx = ctx || this;\n        // 新方法返回的promise\n        return new Promise((resolve, reject) => {\n            // 调用原来的非promise方法func，绑定作用域，传参，以及callback（callback为func的最后一个参数）\n            func.call(ctx, ...arguments, function () {\n                // 将回调函数中的的第一个参数error单独取出\n                var args = Array.prototype.map.call(arguments, item => item);\n                var err = args.shift();\n                // 判断是否有error\n                if (err) {\n                    reject(err)\n                } else {\n                    // 没有error则将后续参数resolve出来\n                    args = args.length > 1 ? args : args[0];\n                    resolve(args);\n                }\n            });\n        })\n    };\n}\n\nexport const promiseImage = (url) => {\n    return new Promise(function (resolve, reject) {\n        resolve(url)\n    })\n}\n\nexport const isChinese = (str) => {\n    if (escape(str).indexOf(\"%u\") < 0) return false\n    return true\n}\n\nexport const handleName = (str) => {\n    let res = emoj2str(str)\n    if (isChinese(res)) {\n        res = res.length > 4 ? res.slice(0, 4) + '...' : res\n    } else {\n        res = res.length > 7 ? res.slice(0, 7) + '...' : res\n    }\n    return res\n}\n\nexport const emoj2str = (str) => {\n    return unescape(escape(str).replace(/\\%uD.{3}/g, ''))\n}\n\n/*获取当前页url*/\nexport const getCurrentPageUrl = () => {\n    let pages = getCurrentPages()\n    let currentPage = pages[pages.length - 1]\n    let url = currentPage.route\n    return url\n}\n\nexport const formatTime = date => {\n    const year = date.getFullYear()\n    const month = date.getMonth() + 1\n    const day = date.getDate()\n    const hour = date.getHours()\n    const minute = date.getMinutes()\n    const second = date.getSeconds()\n\n    return [year, month, day].map(formatNumber).join('/') + ' ' + [hour, minute, second].map(formatNumber).join(':')\n}\n\nexport const formatNumber = n => {\n    n = n.toString()\n    return n[1] ? n : '0' + n\n}\n\nexport const logError = (name, action, info) => {\n    if (!info) {\n        info = 'empty'\n    }\n    try {\n        let deviceInfo = Taro.getSystemInfoSync()\n        var device = JSON.stringify(deviceInfo)\n    } catch (e) {\n        console.error('not support getSystemInfoSync api', err.message)\n    }\n    let time = formatTime(new Date())\n    console.error(time, name, action, info, device)\n    // if (typeof action !== 'object') {\n    // fundebug.notify(name, action, info)\n    // }\n    // fundebug.notifyError(info, { name, action, device, time })\n    if (typeof info === 'object') {\n        info = JSON.stringify(info)\n    }\n}\n\nexport const Toast = (title = ' ', icon = 'null', duration = 2000, mask = true) => {\n    Taro.showToast({\n        title,\n        icon,\n        duration,\n        mask\n    })\n}"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AAHA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAbA;AAPA;AAuBA;AACA;AAFA;AACA;AAvBA;AA2BA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAVA;AAYA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AA9BA;AA7CA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8EA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AA3FA;;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AACA;AAlCA;AAoCA;AACA;AACA;AACA;AA3CA;AA6CA;;;;;;;;;;;;;AClDA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAdA;AAkBA;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AACA;AAJA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAlBA;AAAA;AACA;AADA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AADA;AAgCA;AAEA;AACA;AACA;AACA;AA7CA;AAgDA;;;;;;;;;;;;;;;;;;ACraA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;AAaA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAhBA;AAmBA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA5mBA;AACA;AA+mBA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AALA;AACA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAPA;AAYA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;;;;AACA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClmsourceRoot":""}