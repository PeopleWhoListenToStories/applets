{"version":3,"file":"pages/map/index.js","sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack:///./src/pages/map/index.jsx","webpack:///./src/pages/components/start-end-form/StartEndForm.jsx","webpack:///./src/pages/components/start-end-form/index.less","webpack:///./src/pages/map/index.jsx?663d","webpack:///./src/pages/map/index.less"],"sourcesContent":["import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import React, { useState, useEffect } from 'react'\nimport Taro, { useDidShow } from '@tarojs/taro'\nimport { useObserver } from 'mobx-react'\nimport { View, Map, CoverView, CoverImage } from '@tarojs/components'\nimport StartEndForm from '../components/start-end-form/StartEndForm'\nimport store from '../../store/index'\nimport qqmapsdk from '../../utils/QQMap'\nimport './index.less'\n\nconst defaultTraffic = [{ index: 0, name: '驾车', EN: 'driving' }, { index: 1, name: '步行', EN: 'walking' }, { index: 2, name: '骑行', EN: 'bicycling' }, { index: 3, name: '公交', EN: 'transit' }]\nconst Login = () => {\n    const { Location } = store\n    const [typeArray, setType] = useState(defaultTraffic)\n    const [setting, setSetting] = useState({\n        showScale: false,\n        subKey: '',\n        enable3D: false,\n        latitude: 40.07497505239997,//中心经度\n        longitude: 116.33617818879702,// 中心纬度\n        layerStyle: 1,\n        rotate: 0,\t// 否\t旋转角度，范围 0 ~ 360, 地图正北和设备 y 轴角度的夹角\t2.5.0\n        skew: 50,\t// 否\t倾斜角度，范围 0 ~40, 关于 z 轴的倾角\t2.5.0\n        scale: 12, // 缩放级别，取值范围为3-20\n        minScale: 3,\t//否\t最小缩放级别\n        maxScale: 20,\t//否\t最大缩放级别\n        showLocation: true, //\t\t显示带有方向的当前定位点\t1.0.0\n        showScale: true,\n        showCompass: true,//\t显示指南针\t2.3.0\n        enableOverlooking: true,\t//\t\t开启俯视\t2.3.0\n        enableZoom: true,\t\t//是否支持缩放\t2.3.0\n        enableScroll: true,\t\t//是否支持拖动\t2.3.0\n        enableRotate: true,\t\t//是否支持旋转\t2.3.0\n        enableSatellite: false,\t//否\t是否开启卫星图\t2.7.0\n        enableTraffic: false,\t //否\t是否开启实时路况\t2.7.0 \n        markers: [],\n        polyline: []\n        // covers\tArray.<cover>\t\t否\t即将移除，请使用 markers\t1.0.0\n        // polyline\tArray.<polyline>\t\t否\t路线\t1.0.0\n        // circles\tArray.<circle>\t\t否\t圆\t1.0.0\n        // controls\tArray.<control>\t\t否\t控件（即将废弃，建议使用 cover-view 代替）\t1.0.0\n        // include-points\tArray.<point>\t\t否\t缩放视野以包含所有给定的坐标点\t1.0.0\n        // polygons\tArray.<polygon>\t\t否\t多边形\t2.3.0\n        // subkey\tstring\t\t否\t个性化地图使用的key\t2.3.0\n        // layer-style\tnumber\t1\t否\t个性化地图配置的 style，不支持动态修改\t\n\n        // enable-3D\tboolean\tfalse\t否\t展示3D楼块(工具暂不支持）\t2.3.0\n        // show-scale\tboolean\tfalse\t否\t显示比例尺，工具暂不支持\t2.8.0\n        // enable-poi\tboolean\t\t否\t是否展示 POI 点\t2.14.0\n        // enable-building\tboolean\t\t否\t是否展示建筑物\t2.14.0\n        // setting\tobject\t\t否\t配置项\t2.8.2\n        // bindtap\teventhandle\t\t否\t点击地图时触发，2.9.0起返回经纬度信息\t1.0.0\n        // bindmarkertap\teventhandle\t\t否\t点击标记点时触发，e.detail = {markerId}\t1.0.0\n        // bindlabeltap\teventhandle\t\t否\t点击label时触发，e.detail = {markerId}\t2.9.0\n        // bindcontroltap\teventhandle\t\t否\t点击控件时触发，e.detail = {controlId}\t1.0.0\n        // bindcallouttap\teventhandle\t\t否\t点击标记点对应的气泡时触发e.detail = {markerId}\t1.2.0\n        // bindupdated\teventhandle\t\t否\t在地图渲染更新完成时触发\t1.6.0\n        // bindregionchange\teventhandle\t\t否\t视野发生变化时触发，\t2.3.0\n        // bindpoitap\teventhandle\t\t否\t点击地图poi点时触发，e.detail = {name, longitude, latitude}\t2.3.0\n        // bindanchorpointtap\teventhandle\t\t否\t点击定位标时触发，e.detail = {longitude, latitude}\t2.13.0\n    })\n    const [traffic, setTraffic] = useState('驾车')\n\n    useDidShow(() => {\n        Taro.setNavigationBarTitle({\n            title: \"地理位置\"\n        })\n    })\n\n    useEffect(() => {\n        getLocation()\n        return () => { }\n    }, [])\n\n    useEffect(() => {\n        return () => { }\n    }, Location.markers)\n\n    function getLocation() {\n        Taro.getLocation({ type: 'wgs84 ' }).then(data => {\n            // console.log(data, \"getLocation\")\n            if (data.errMsg === \"getLocation:ok\") {\n                console.log(data, \"resdata\")\n                setSetting({\n                    ...setting,\n                    latitude: data.latitude,\n                    longitude: data.longitude,\n                    scale: 12\n                })\n            } else {\n                Taro.showToast({\n                    title: '获取当前位置失败',\n                    duration: 2000,\n                    icon: 'none',\n                    mask: false,\n                })\n            }\n\n        })\n    }\n\n    function onTap(e) {\n        setSetting({\n            ...setting,\n            latitude: e.detail.latitude,\n            longitude: e.detail.longitude\n        })\n    }\n\n    // 获取当前位置\n    function clickLocation() {\n        if (!Location.startAddress.title || !Location.endAddress.title) {\n            getLocation()\n            return;\n        }\n        const params = {\n            latitudeS: Location.startAddress.lat,\n            longitudeS: Location.startAddress.lng,\n            latitudeE: Location.endAddress.lat,\n            longitudeE: Location.endAddress.lng,\n            mode: defaultTraffic.find(item => item.name === traffic).EN\n        }\n        changeDirection(params)\n    }\n\n    // 获取路线\n    function changeDirection(params) {\n        qqmapsdk.direction({\n            mode: params.mode,\n            from: {\n                latitude: params.latitudeS,\n                longitude: params.longitudeS\n            },\n            to: {\n                latitude: params.latitudeE,\n                longitude: params.longitudeE\n            },\n            success: res => {\n                // 大于1 代表是公交方式需要另外处理\n                if (!res.result.routes[0].mode) {\n                    const data = Object.keys(res.result.routes).map(index => {\n                        return {\n                            ...res.result.routes[index],\n                            steps: res.result.routes[index].steps.map(item => {\n                                if (item.mode !== 'TRANSIT') {\n                                    return {\n                                        ...item,\n                                        polyline: formatPolyline(item.polyline)\n                                    }\n                                } else {\n                                    return {\n                                        ...item,\n                                        lines: item.lines.map(child => {\n                                            return {\n                                                ...child,\n                                                polyline: formatPolyline(child.polyline)\n                                            }\n                                        })\n                                    }\n                                }\n\n                            })\n                        }\n                    })\n                    let polyline = [], markers = [{\n                        id: 1,\n                        latitude: params.latitudeS,\n                        longitude: params.longitudeS,\n                        callout: {\n                            content: Location.startAddress.title,\n                            padding: 5,\n                            display: 'ALWAYS',\n                            textAlign: 'center'\n                        }\n                    },\n                    {\n                        id: 2,\n                        latitude: params.latitudeE,\n                        longitude: params.longitudeE,\n                        callout: {\n                            content: Location.endAddress.title,\n                            padding: 5,\n                            display: 'ALWAYS',\n                            textAlign: 'center'\n                        }\n                    }];\n                    data[0].steps.map((item) => {\n                        if (item.mode === 'WALKING') {\n                            polyline.push({\n                                points: item.polyline,\n                                color: \"#FF6347\",\n                                width: 9,\n                                dottedLine: true,\n                            })\n                        } else {\n                            item.lines.forEach((child, index) => {\n                                child.stations.map(val => {\n                                    markers.push({\n                                        id: val.id,\n                                        latitude: val.location.lat,\n                                        longitude: val.location.lng,\n                                        zIndex: 100,\n                                        width: 0,\n                                        height: 0,\n                                        clusterId: val.id, // 必须\n                                        label: {\n                                            fontSize: 8,\n                                            width: 10,\n                                            height: 10,\n                                            bgColor: '#fff',\n                                            borderRadius: 30,\n                                            textAlign: 'center',\n                                            anchorX: 0,\n                                            anchorY: 10,\n                                        }\n                                    })\n                                })\n\n                                polyline.push({\n                                    points: child.polyline,\n                                    color: \"#4395ff\",\n                                    width: 9,\n                                    dottedLine: false,\n                                    arrowLine: true, //带箭头的线\n                                    borderWidth: 1, //线的边框宽度\n                                    borderColor: '#ccc',\n                                })\n\n                            })\n                        }\n                    })\n                    setSetting({\n                        ...setting,\n                        markers,\n                        polyline\n                    })\n                } else {\n                    let coors = res.result.routes[0].polyline, points = [], scale = 12;\n                    for (let i = 2; i < coors.length; i++) { coors[i] = coors[i - 2] + coors[i] / 1000000 }\n                    for (let key = 0; key < coors.length; key += 2) {\n                        points.push({\n                            latitude: coors[key],\n                            longitude: coors[key + 1],\n                        })\n                    }\n                    const value = res.result.routes[0].distance / 1000\n                    switch (value) {\n                        case value < 10 && value >= 0:\n                            scale = 19\n                            break;\n                        case value < 20 && value >= 10:\n                            scale = 15\n                            break;\n                        case value < 30 && value >= 20:\n                            scale = 10\n                            break;\n                        case value < 40 && value >= 30:\n                            scale = 7\n                            break;\n                        default:\n                            scale = 12\n                            break;\n                    }\n                    setSetting({\n                        ...setting,\n                        scale,\n                        latitude: params.latitudeS,\n                        longitude: params.longitudeS,\n                        markers: [\n                            {\n                                id: 1,\n                                latitude: +params.latitudeS,\n                                longitude: +params.longitudeS,\n                                callout: {\n                                    content: Location.startAddress.title,\n                                    padding: 5,\n                                    display: 'ALWAYS',\n                                    textAlign: 'center'\n                                }\n                            },\n                            {\n                                id: 2,\n                                latitude: +params.latitudeE,\n                                longitude: +params.longitudeE,\n                                callout: {\n                                    content: Location.endAddress.title,\n                                    padding: 5,\n                                    display: 'ALWAYS',\n                                    textAlign: 'center'\n                                }\n                            }\n                        ],\n                        polyline: [{\n                            points,\n                            color: \"#4395ff\",\n                            width: 10,\n                            dottedLine: false,\n                            arrowLine: true, //带箭头的线\n                            borderWidth: 1, //线的边框宽度\n                            borderColor: '#ccc',\n                        }]\n                    })\n                }\n            }\n        })\n    }\n\n    // 修改setting 配置参数\n    function checkSettingProps(e, type) {\n        setSetting({\n            [type]: !setting[type]\n        })\n    }\n\n    function bindPickerChange(event) {\n        const { value } = event.mpEvent.detail\n        setTraffic(defaultTraffic[value].name)\n        clickLocation()\n    }\n\n    function formatPolyline(polyline) {\n        let coors = polyline, points = [];\n        for (let i = 2; i < coors.length; i++) { coors[i] = coors[i - 2] + coors[i] / 1000000 }\n        for (let key = 0; key < coors.length; key += 2) {\n            points.push({\n                latitude: coors[key],\n                longitude: coors[key + 1],\n            })\n        }\n        return points\n    }\n\n    return useObserver(() => (\n        < View id='login' >\n            <View className=\"nav\">\n                <picker onChange={(e) => { bindPickerChange(e) }} range={typeArray} range-key=\"name\" >\n                    <view class=\"picker\">{traffic}</view>\n                </picker>\n                <StartEndForm />\n            </View>\n            <View class='map-wrapper'>\n                <Map id='map' scale={setting.scale} markers={setting.markers} polyline={setting.polyline} show-location\n                    onClick={(e) => { onTap(e) }} setting={setting} includePoints={setting.markers} >\n                    <CoverView className='weixing' onClick={(e) => { checkSettingProps(e, 'enableSatellite') }}  >\n                        <CoverImage className='img' src={`../../assets/image/${setting.enableSatellite ? 'weixingfasheSVG' : 'weixingtanceSVG'}.png`} />\n                    </CoverView>\n                    <CoverView className='lukuang' onClick={(e) => { checkSettingProps(e, 'enableTraffic') }}  >\n                        <CoverImage className='img' src={`../../assets/image/${setting.enableTraffic ? 'toggle' : 'lukuang'}.png`} />\n                    </CoverView>\n                    <CoverView className='dingwei' onClick={() => { clickLocation() }}  >\n                        <CoverImage className='img' src='../../assets/image/ditu.png' />\n                    </CoverView>\n                </Map>\n            </View>\n\n        </View >\n    ))\n}\nexport default Login","import React, { useEffect } from 'react'\nimport Taro from \"@tarojs/taro\"\nimport { Form, Input, View } from '@tarojs/components'\nimport { useObserver } from 'mobx-react'\nimport store from '../../../store/index'\nimport './index.less'\n\nexport default function StartEndForm() {\n\n    const { Location } = store\n\n    function changeText(e, type) {\n        Taro.navigateTo({\n            url: `/pages/location/index?search=${type}`,\n        })\n    }\n    useEffect(() => {\n        switch (Taro.Current.router.params.search) {\n            case 'startAddress':\n                Location.setStartAddress({\n                    title: Taro.Current.router.params.title,\n                    lat: Taro.Current.router.params.lat,\n                    lng: Taro.Current.router.params.lng\n                })\n                break;\n            case 'endAddress':\n                Location.setEndAddress({\n                    title: Taro.Current.router.params.title,\n                    lat: Taro.Current.router.params.lat,\n                    lng: Taro.Current.router.params.lng\n                })\n                break;\n            default:\n                return;\n        }\n        return () => { }\n    }, [])\n\n    return useObserver(() => (\n        <Form onSubmit={() => { }} onReset={() => { this.formReset() }} >\n            <View className='input-box'>\n                <Input class='input' value={Location.startAddress.title} type='search' onClick={(e) => { changeText(e, \"startAddress\") }} placeholder='输入起始位置' />\n                        -\n                        <Input class='input' value={Location.endAddress.title} type='search' onClick={(e) => { changeText(e, \"endAddress\") }} placeholder='输入结束位置' />\n            </View>\n        </Form>\n    ))\n}\n\n","// extracted by mini-css-extract-plugin","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../node_modules/@tarojs/mini-runner/node_modules/babel-loader/lib/index.js!./index.jsx\"\nvar config = {};\n\n\nvar inst = Page(createPageConfig(component, 'pages/map/index', {}, config || {}))\n\n","// extracted by mini-css-extract-plugin"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAZA;AAHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAmDA;AACA;AACA;AADA;AADA;AAMA;AACA;AACA;AAFA;AAKA;AACA;AADA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAJA;AAFA;AASA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAjBA;AAoBA;AACA;AACA;AACA;AAEA;AACA;AAHA;AA3FA;AACA;AACA;AAiGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAOA;AA/GA;AACA;AACA;AAiHA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAFA;AADA;AAMA;AAEA;AACA;AAEA;AAFA;AADA;AAFA;AASA;AAhBA;AAFA;AADA;AAwBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AARA;AADA;AAsBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAPA;AAvBA;AAkCA;AA3CA;AA6CA;AAEA;AACA;AAHA;AA5FA;AAkGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAfA;AACA;AAgBA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAPA;AA7BA;AAuCA;AACA;AAhLA;AApHA;AACA;AACA;AAuSA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AACA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAlBA;AAjUA;AACA;AA0VA;;;;;;;;;;;;;ACrWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AAhBA;AACA;AAiBA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;;;;;;;;;;;AC/CA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;;;;A","sourceRoot":""}