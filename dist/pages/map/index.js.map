{"version":3,"file":"pages/map/index.js","sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack:///./src/pages/map/index.tsx","webpack:///./src/pages/map/components/location/index.scss","webpack:///./src/pages/map/components/location/index.tsx","webpack:///./src/pages/map/components/start-end-form/index.scss","webpack:///./src/pages/map/components/start-end-form/index.tsx","webpack:///./src/pages/map/index.scss","webpack:///./src/pages/map/index.tsx?8f3c","webpack:///./src/utils/QQMap.js"],"sourcesContent":["import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import React, { useState, useEffect } from 'react'\nimport Taro, { useDidShow } from '@tarojs/taro'\nimport { useObserver } from 'mobx-react'\nimport { View, Map, CoverView, CoverImage, Picker } from '@tarojs/components'\nimport StartEndForm from './components/start-end-form/index'\nimport LocationCom from \"./components/location/index\"\nimport store from '../../store/index'\nimport qqmapsdk from '../../utils/QQMap'\nimport { Toast } from \"../../utils/tool\"\nimport './index.scss'\n\nconst defaultTraffic = [{ index: 0, name: '驾车', EN: 'driving' }, { index: 1, name: '步行', EN: 'walking' }, { index: 2, name: '骑行', EN: 'bicycling' }, { index: 3, name: '公交', EN: 'transit' }]\n\ninterface defaultTrafficItemType {\n    index: number,\n    name: string,\n    EN: string\n}\n\nconst MapLoaction: React.FC = () => {\n    const { Location } = store\n    const [traffic, setTraffic] = useState<string>('驾车')\n    const [typeArray, setType] = useState<defaultTrafficItemType[]>([])\n    const [setting, setSetting] = useState<{\n        subKey: string,\n        enable3D: false,\n        latitude: number,//中心经度\n        longitude: number,// 中心纬度\n        layerStyle: number,\n        rotate: number,\t// 否\t旋转角度，范围 0 ~ 360, 地图正北和设备 y 轴角度的夹角\t2.5.0\n        skew: number,\t// 否\t倾斜角度，范围 0 ~40, 关于 z 轴的倾角\t2.5.0\n        scale: number, // 缩放级别，取值范围为3-20\n        minScale: number,\t//否\t最小缩放级别\n        maxScale: number,\t//否\t最大缩放级别\n        showLocation: boolean, //\t\t显示带有方向的当前定位点\t1.0.0\n        showScale: boolean,\n        showCompass: boolean,//\t显示指南针\t2.3.0\n        enableOverlooking: boolean,\t//\t\t开启俯视\t2.3.0\n        enableZoom: boolean,\t\t//是否支持缩放\t2.3.0\n        enableScroll: boolean,\t\t//是否支持拖动\t2.3.0\n        enableRotate: boolean,\t\t//是否支持旋转\t2.3.0\n        enableSatellite: boolean,\t//否\t是否开启卫星图\t2.7.0\n        enableTraffic: boolean,\t //否\t是否开启实时路况\t2.7.0 \n        markers: any[],\n        polyline: any[]\n        [key: string]: any\n    }>({\n        subKey: '',\n        enable3D: false,\n        latitude: 40.07497505239997,//中心经度\n        longitude: 116.33617818879702,// 中心纬度\n        layerStyle: 1,\n        rotate: 0,\t// 否\t旋转角度，范围 0 ~ 360, 地图正北和设备 y 轴角度的夹角\t2.5.0\n        skew: 50,\t// 否\t倾斜角度，范围 0 ~40, 关于 z 轴的倾角\t2.5.0\n        scale: 12, // 缩放级别，取值范围为3-20\n        minScale: 3,\t//否\t最小缩放级别\n        maxScale: 20,\t//否\t最大缩放级别\n        showLocation: true, //\t\t显示带有方向的当前定位点\t1.0.0\n        showScale: true,\n        showCompass: true,//\t显示指南针\t2.3.0\n        enableOverlooking: true,\t//\t\t开启俯视\t2.3.0\n        enableZoom: true,\t\t//是否支持缩放\t2.3.0\n        enableScroll: true,\t\t//是否支持拖动\t2.3.0\n        enableRotate: true,\t\t//是否支持旋转\t2.3.0\n        enableSatellite: false,\t//否\t是否开启卫星图\t2.7.0\n        enableTraffic: false,\t //否\t是否开启实时路况\t2.7.0 \n        markers: [],\n        polyline: []\n        // covers\tArray.<cover>\t\t否\t即将移除，请使用 markers\t1.0.0\n        // polyline\tArray.<polyline>\t\t否\t路线\t1.0.0\n        // circles\tArray.<circle>\t\t否\t圆\t1.0.0\n        // controls\tArray.<control>\t\t否\t控件（即将废弃，建议使用 cover-view 代替）\t1.0.0\n        // include-points\tArray.<point>\t\t否\t缩放视野以包含所有给定的坐标点\t1.0.0\n        // polygons\tArray.<polygon>\t\t否\t多边形\t2.3.0\n        // subkey\tstring\t\t否\t个性化地图使用的key\t2.3.0\n        // layer-style\tnumber\t1\t否\t个性化地图配置的 style，不支持动态修改\t\n\n        // enable-3D\tboolean\tfalse\t否\t展示3D楼块(工具暂不支持）\t2.3.0\n        // show-scale\tboolean\tfalse\t否\t显示比例尺，工具暂不支持\t2.8.0\n        // enable-poi\tboolean\t\t否\t是否展示 POI 点\t2.14.0\n        // enable-building\tboolean\t\t否\t是否展示建筑物\t2.14.0\n        // setting\tobject\t\t否\t配置项\t2.8.2\n        // bindtap\teventhandle\t\t否\t点击地图时触发，2.9.0起返回经纬度信息\t1.0.0\n        // bindmarkertap\teventhandle\t\t否\t点击标记点时触发，e.detail = {markerId}\t1.0.0\n        // bindlabeltap\teventhandle\t\t否\t点击label时触发，e.detail = {markerId}\t2.9.0\n        // bindcontroltap\teventhandle\t\t否\t点击控件时触发，e.detail = {controlId}\t1.0.0\n        // bindcallouttap\teventhandle\t\t否\t点击标记点对应的气泡时触发e.detail = {markerId}\t1.2.0\n        // bindupdated\teventhandle\t\t否\t在地图渲染更新完成时触发\t1.6.0\n        // bindregionchange\teventhandle\t\t否\t视野发生变化时触发，\t2.3.0\n        // bindpoitap\teventhandle\t\t否\t点击地图poi点时触发，e.detail = {name, longitude, latitude}\t2.3.0\n        // bindanchorpointtap\teventhandle\t\t否\t点击定位标时触发，e.detail = {longitude, latitude}\t2.13.0\n    })\n\n    useEffect(() => {\n        clickLocation()\n    }, [traffic])\n\n    useDidShow(() => {\n        Taro.setNavigationBarTitle({\n            title: \"地理位置\"\n        })\n        Location.isLocationCom = ''\n    })\n\n    useEffect(() => {\n        setType(defaultTraffic)\n        getLocation()\n        return () => { }\n    }, [])\n\n    useEffect(() => {\n        return () => { }\n    }, [(Location as any).markers])\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    function getLocation() {\n        Taro.getLocation({ type: 'wgs84 ' }).then(data => {\n            // console.log(data, \"getLocation\")\n            if (data.errMsg === \"getLocation:ok\") {\n                console.log(data, \"resdata\")\n                setSetting({\n                    ...setting,\n                    latitude: data.latitude,\n                    longitude: data.longitude,\n                    scale: 12\n                })\n            } else {\n                Taro.showToast({\n                    title: '获取当前位置失败',\n                    duration: 2000,\n                    icon: 'none',\n                    mask: false,\n                })\n            }\n\n        })\n    }\n\n    function onTap(e) {\n        setSetting({\n            ...setting,\n            latitude: e.detail.latitude,\n            longitude: e.detail.longitude\n        })\n    }\n\n    // 获取当前位置\n    function clickLocation() {\n        if (!Location.startAddress.title) {\n            Toast('还没有输入起始位置', 'none', 500)\n            getLocation()\n            return;\n        }\n        if (!Location.endAddress.title) {\n            Toast('还没有输入结束位置', 'none', 500)\n            getLocation()\n            return;\n        }\n        const params = {\n            latitudeS: Location.startAddress.lat,\n            longitudeS: Location.startAddress.lng,\n            latitudeE: Location.endAddress.lat,\n            longitudeE: Location.endAddress.lng,\n            mode: (defaultTraffic.find((item: any) => item.name === traffic))?.EN\n        }\n        changeDirection(params)\n    }\n\n    // 获取路线\n    function changeDirection(params) {\n        qqmapsdk.direction({\n            mode: params.mode,\n            from: {\n                latitude: params.latitudeS,\n                longitude: params.longitudeS\n            },\n            to: {\n                latitude: params.latitudeE,\n                longitude: params.longitudeE\n            },\n            success: res => {\n                // 大于1 代表是公交方式需要另外处理\n                if (!res.result.routes[0].mode) {\n                    const data = Object.keys(res.result.routes).map(index => {\n                        return {\n                            ...res.result.routes[index],\n                            steps: res.result.routes[index].steps.map(item => {\n                                if (item.mode !== 'TRANSIT') {\n                                    return {\n                                        ...item,\n                                        polyline: formatPolyline(item.polyline)\n                                    }\n                                } else {\n                                    return {\n                                        ...item,\n                                        lines: item.lines.map(child => {\n                                            return {\n                                                ...child,\n                                                polyline: formatPolyline(child.polyline)\n                                            }\n                                        })\n                                    }\n                                }\n\n                            })\n                        }\n                    })\n                    let polyline: {\n                        points: string | number,\n                        color: string,\n                        width: number,\n                        dottedLine: boolean,\n                        arrowLine?: boolean,\n                        borderWidth?: number,\n                        borderColor?: string,\n                    }[] = [],\n                        markers: {\n                            id: number,\n                            latitude: string,\n                            longitude: string,\n                            zIndex?: number,\n                            width?: number,\n                            height?: number,\n                            clusterId?: number | string, // 必须\n                            label?: {\n                                fontSize: number,\n                                width: number,\n                                height: number,\n                                bgColor: string,\n                                borderRadius: number,\n                                textAlign: string,\n                                anchorX: number,\n                                anchorY: number,\n                            }\n                            callout?: {\n                                content: string,\n                                padding: number,\n                                display: string,\n                                textAlign: string\n                            }\n                        }[] = [{\n                            id: 1,\n                            latitude: params.latitudeS,\n                            longitude: params.longitudeS,\n                            callout: {\n                                content: Location.startAddress.title,\n                                padding: 5,\n                                display: 'ALWAYS',\n                                textAlign: 'center'\n                            }\n                        },\n                        {\n                            id: 2,\n                            latitude: params.latitudeE,\n                            longitude: params.longitudeE,\n                            callout: {\n                                content: Location.endAddress.title,\n                                padding: 5,\n                                display: 'ALWAYS',\n                                textAlign: 'center'\n                            }\n                        }];\n\n                    data[0].steps.map((item) => {\n                        if (item.mode === 'WALKING') {\n                            polyline.push({\n                                points: item.polyline,\n                                color: \"#FF6347\",\n                                width: 9,\n                                dottedLine: true,\n                            })\n                        } else {\n                            item.lines.forEach((child) => {\n                                child.stations.map(val => {\n                                    markers.push({\n                                        id: val.id,\n                                        latitude: val.location.lat,\n                                        longitude: val.location.lng,\n                                        zIndex: 100,\n                                        width: 0,\n                                        height: 0,\n                                        clusterId: val.id, // 必须\n                                        label: {\n                                            fontSize: 8,\n                                            width: 10,\n                                            height: 10,\n                                            bgColor: '#fff',\n                                            borderRadius: 30,\n                                            textAlign: 'center',\n                                            anchorX: 0,\n                                            anchorY: 10,\n                                        }\n                                    })\n                                })\n\n                                polyline.push({\n                                    points: child.polyline,\n                                    color: \"#4395ff\",\n                                    width: 9,\n                                    dottedLine: false,\n                                    arrowLine: true, //带箭头的线\n                                    borderWidth: 1, //线的边框宽度\n                                    borderColor: '#ccc',\n                                })\n\n                            })\n                        }\n                    })\n\n                    setSetting({\n                        ...setting,\n                        markers,\n                        polyline\n                    })\n                } else {\n                    let coors = res.result.routes[0].polyline, points: {\n                        latitude: number | string,\n                        longitude: number | string,\n                    }[] = [], scale = 12;\n                    for (let i = 2; i < coors.length; i++) { coors[i] = coors[i - 2] + coors[i] / 1000000 }\n                    for (let key = 0; key < coors.length; key += 2) {\n                        points.push({\n                            latitude: coors[key],\n                            longitude: coors[key + 1],\n                        })\n                    }\n                    const value: number = Number(res.result.routes[0].distance / 1000)\n                    switch (value) {\n                        case Number(value) < 10 && Number(value) >= 0:\n                            scale = 19\n                            break;\n                        case Number(value) < 20 && Number(value) >= 10:\n                            scale = 15\n                            break;\n                        case Number(value) < 30 && Number(value) >= 20:\n                            scale = 10\n                            break;\n                        case Number(value) < 40 && Number(value) >= 30:\n                            scale = 7\n                            break;\n                        default:\n                            scale = 12\n                            break;\n                    }\n                    setSetting({\n                        ...setting,\n                        scale,\n                        latitude: params.latitudeS,\n                        longitude: params.longitudeS,\n                        markers: [\n                            {\n                                id: 1,\n                                latitude: +params.latitudeS,\n                                longitude: +params.longitudeS,\n                                callout: {\n                                    content: Location.startAddress.title,\n                                    padding: 5,\n                                    display: 'ALWAYS',\n                                    textAlign: 'center'\n                                }\n                            },\n                            {\n                                id: 2,\n                                latitude: +params.latitudeE,\n                                longitude: +params.longitudeE,\n                                callout: {\n                                    content: Location.endAddress.title,\n                                    padding: 5,\n                                    display: 'ALWAYS',\n                                    textAlign: 'center'\n                                }\n                            }\n                        ],\n                        polyline: [{\n                            points,\n                            color: \"#4395ff\",\n                            width: 10,\n                            dottedLine: false,\n                            arrowLine: true, //带箭头的线\n                            borderWidth: 1, //线的边框宽度\n                            borderColor: '#ccc',\n                        }]\n                    })\n                }\n            }\n        })\n    }\n\n    // 修改setting 配置参数\n    function checkSettingProps(type: string) {\n        setSetting({\n            ...setting,\n            [type]: !setting[type]\n        })\n    }\n\n    function bindPickerChange(event) {\n        const { value } = event.mpEvent.detail\n        setTraffic(defaultTraffic[value].name)\n    }\n\n    function formatPolyline(polyline) {\n        let coors = polyline, points: {\n            latitude: number | string,\n            longitude: number | string\n        }[] = [];\n        for (let i = 2; i < coors.length; i++) { coors[i] = coors[i - 2] + coors[i] / 1000000 }\n        for (let key = 0; key < coors.length; key += 2) {\n            points.push({\n                latitude: coors[key],\n                longitude: coors[key + 1],\n            })\n        }\n        return points\n    }\n\n    return useObserver(() => (\n        <View id='mapLoaction' >\n            {          !Location.isLocationCom &&\n                <View className='nav'>\n                    <Picker onChange={(e) => { bindPickerChange(e) }} range={typeArray} range-key='name' >\n                        <View className='picker'>{traffic}</View>\n                    </Picker>\n                    <StartEndForm />\n                </View>\n            }\n            {\n                !Location.isLocationCom && <View className='map-wrapper'>\n                    <Map id='map' show-location scale={setting.scale} markers={setting.markers} polyline={setting.polyline} setting={setting} includePoints={setting.markers} onClick={(e) => { onTap(e) }}>\n                        <CoverView className='weixing' onClick={() => { checkSettingProps('enableSatellite') }}  >\n                            <CoverImage className='img' src={(global as any).constants.icon[`${setting.enableSatellite ? 'weixingOpenIcon' : 'weixingOffIcon'}`]} />\n                        </CoverView>\n                        <CoverView className='lukuang' onClick={() => { checkSettingProps('enableTraffic') }}  >\n                            <CoverImage className='img' src={(global as any).constants.icon[`${setting.enableTraffic ? 'lukuangOpenIcon' : 'lukuangOffIcon'}`]} />\n                        </CoverView>\n                        <CoverView className='dingwei' onClick={() => { clickLocation() }}  >\n                            <CoverImage className='img' src={(global as any).constants.icon.mapIcon} />\n                        </CoverView>\n                    </Map>\n                </View>\n            }\n            {\n                Location.isLocationCom && <LocationCom />\n            }\n        </View >\n    ))\n}\nexport default MapLoaction","// extracted by mini-css-extract-plugin","import React, { useState, useEffect } from 'react'\nimport Taro from \"@tarojs/taro\"\nimport { View, Text, Input, CoverImage, Picker } from '@tarojs/components'\nimport stroe from \"../../../../store/index\"\nimport QQMapWX from '../../../../utils/QQMap'\nimport { Toast } from \"../../../../utils/tool\"\nimport \"../../../../../config\"\nimport './index.scss'\n\nconst LocationCom: React.FC = () => {\n    const { Location } = stroe\n    const [filterList, setFilterList] = useState<[]>([])\n    const [cityList, setCityList] = useState<string[]>([])\n    const [city, setCity] = useState<string>('')\n    const [list, setList] = useState<any[]>([])\n\n    useEffect(() => {\n        Taro.setNavigationBarTitle({\n            title: \"位置\"\n        })\n        Taro.request({\n            url: `http://apis.map.qq.com/ws/district/v1/list`,\n            method: 'GET',\n            data: {\n                key: 'B46BZ-TDXKW-Q5WRQ-OIKGT-UCW4K-6QBXD'\n            },\n            success: function (res) {\n                if (res.statusCode === 200) {\n                    setCityList(res.data.result[0].map(v => v.fullname))\n                    setCity(res.data.result[0][0].fullname)\n                    setList(res.data.result[0])\n                } else {\n                    Toast('失败', 'none', 1000)\n                }\n            }\n        })\n        return () => { }\n    }, [])\n\n    function inputText(e) {\n        if (e.detail.value === '') {\n            setFilterList([])\n        } else {\n            QQMapWX.search({\n                keyword: e.detail.value,\n                region: city,\n                page_index: 1,\n                page_size: 20,\n                orderby: '_distance',\n                complete: function (res) {\n                    setFilterList(res.data)\n                }\n            })\n        }\n\n    }\n\n    function tapAddress(params) {\n        Location[Location.isLocationCom] = {\n            title: params.title,\n            lat: params.location.lat,\n            lng: params.location.lng,\n        }\n        Location.isLocationCom = ''\n        setFilterList([])\n    }\n\n    function onChangeCity(e) {\n        setCity(cityList[e.detail.value])\n    }\n\n    return (\n        <View className='location'>\n            <View className='nav'>\n                {/* <Text className=\"city\">北京</Text> */}\n                <View className='city'>\n                    <Picker mode='selector' range={cityList} onChange={(e) => { onChangeCity(e) }}>\n                        <View className='picker' >\n                            {city}\n                        </View>\n                    </Picker>\n                </View>\n                <Input className='address' type='text' onInput={(e) => { inputText(e) }} placeholder='请输入'></Input>\n            </View>\n            <View className='content'>\n                {\n                    filterList && filterList.map((item: { id: string | number, title: string, address: string }) => {\n                        return <View className='item' key={item.id}>\n                            <CoverImage className='img' src={(global as any).constants.icon.mapIcon} />\n                            <View className='text' key={item.id} onClick={() => { tapAddress(item) }}>\n                                <Text className='title' >{item.title}</Text>\n                                <Text className='value' >{item.address}</Text>\n                            </View>\n                        </View>\n                    })\n                }\n            </View>\n        </View >\n    )\n}\nexport default LocationCom ","// extracted by mini-css-extract-plugin","import React, { useEffect } from 'react'\nimport Taro from \"@tarojs/taro\"\nimport { Form, Input, View } from '@tarojs/components'\nimport { useObserver } from 'mobx-react'\nimport store from '../../../../store/index'\nimport './index.scss'\n\nexport default function StartEndForm() {\n\n    const { Location } = store\n\n    function changeText(type) {\n        // Taro.navigateTo({\n        //     url: `/pages/location/index?search=${type}`,\n        // })\n        Location.isLocationCom = type\n    }\n\n    useEffect(() => {\n        switch ((Taro.Current as any).router.params.search) {\n            case 'startAddress':\n                Location.setStartAddress({\n                    title: (Taro.Current as any).router.params.title,\n                    lat: (Taro.Current as any).router.params.lat,\n                    lng: (Taro.Current as any).router.params.lng\n                })\n                break;\n            case 'endAddress':\n                Location.setEndAddress({\n                    title: (Taro.Current as any).router.params.title,\n                    lat: (Taro.Current as any).router.params.lat,\n                    lng: (Taro.Current as any).router.params.lng\n                })\n                break;\n            default:\n                return;\n        }\n        return () => { }\n    }, [])\n\n    return useObserver(() => (\n        <View className='input-box'>\n            <Input className='input' value={Location.startAddress.title} type='text' onClick={() => { changeText(\"startAddress\") }} placeholder='输入起始位置' />\n                        -\n            <Input className='input' value={Location.endAddress.title} type='text' onClick={() => { changeText(\"endAddress\") }} placeholder='输入结束位置' />\n        </View>\n    ))\n}\n\n","// extracted by mini-css-extract-plugin","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../node_modules/@tarojs/mini-runner/node_modules/babel-loader/lib/index.js!./index.tsx\"\nvar config = {};\n\n\nvar inst = Page(createPageConfig(component, 'pages/map/index', {}, config || {}))\n\n","/**\n * 微信小程序JavaScriptSDK\n * \n * @version 1.2\n * @date 2019-03-06\n * @author v_ylyue@tencent.com\n */\n\nvar ERROR_CONF = {\n  KEY_ERR: 311,\n  KEY_ERR_MSG: 'key格式错误',\n  PARAM_ERR: 310,\n  PARAM_ERR_MSG: '请求参数信息有误',\n  SYSTEM_ERR: 600,\n  SYSTEM_ERR_MSG: '系统错误',\n  WX_ERR_CODE: 1000,\n  WX_OK_CODE: 200\n};\nvar BASE_URL = 'https://apis.map.qq.com/ws/';\nvar URL_SEARCH = BASE_URL + 'place/v1/search';\nvar URL_SUGGESTION = BASE_URL + 'place/v1/suggestion';\nvar URL_GET_GEOCODER = BASE_URL + 'geocoder/v1/';\nvar URL_CITY_LIST = BASE_URL + 'district/v1/list';\nvar URL_AREA_LIST = BASE_URL + 'district/v1/getchildren';\nvar URL_DISTANCE = BASE_URL + 'distance/v1/';\nvar URL_DIRECTION = BASE_URL + 'direction/v1/';\nvar MODE = {\n  driving: 'driving',\n  transit: 'transit'\n};\nvar EARTH_RADIUS = 6378136.49;\nvar Utils = {\n  /**\n  * md5加密方法\n  * 版权所有©2011 Sebastian Tschan，https：//blueimp.net\n  */\n  safeAdd(x, y) {\n    var lsw = (x & 0xffff) + (y & 0xffff);\n    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n    return (msw << 16) | (lsw & 0xffff);\n  },\n  bitRotateLeft(num, cnt) {\n    return (num << cnt) | (num >>> (32 - cnt));\n  },\n  md5cmn(q, a, b, x, s, t) {\n    return this.safeAdd(this.bitRotateLeft(this.safeAdd(this.safeAdd(a, q), this.safeAdd(x, t)), s), b);\n  },\n  md5ff(a, b, c, d, x, s, t) {\n    return this.md5cmn((b & c) | (~b & d), a, b, x, s, t);\n  },\n  md5gg(a, b, c, d, x, s, t) {\n    return this.md5cmn((b & d) | (c & ~d), a, b, x, s, t);\n  },\n  md5hh(a, b, c, d, x, s, t) {\n    return this.md5cmn(b ^ c ^ d, a, b, x, s, t);\n  },\n  md5ii(a, b, c, d, x, s, t) {\n    return this.md5cmn(c ^ (b | ~d), a, b, x, s, t);\n  },\n  binlMD5(x, len) {\n    /* append padding */\n    x[len >> 5] |= 0x80 << (len % 32);\n    x[((len + 64) >>> 9 << 4) + 14] = len;\n\n    var i;\n    var olda;\n    var oldb;\n    var oldc;\n    var oldd;\n    var a = 1732584193;\n    var b = -271733879;\n    var c = -1732584194;\n    var d = 271733878;\n\n    for (i = 0; i < x.length; i += 16) {\n      olda = a;\n      oldb = b;\n      oldc = c;\n      oldd = d;\n\n      a = this.md5ff(a, b, c, d, x[i], 7, -680876936);\n      d = this.md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n      c = this.md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n      b = this.md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n      a = this.md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n      d = this.md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n      c = this.md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n      b = this.md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n      a = this.md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n      d = this.md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n      c = this.md5ff(c, d, a, b, x[i + 10], 17, -42063);\n      b = this.md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n      a = this.md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n      d = this.md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n      c = this.md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n      b = this.md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n\n      a = this.md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n      d = this.md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n      c = this.md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n      b = this.md5gg(b, c, d, a, x[i], 20, -373897302);\n      a = this.md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n      d = this.md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n      c = this.md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n      b = this.md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n      a = this.md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n      d = this.md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n      c = this.md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n      b = this.md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n      a = this.md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n      d = this.md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n      c = this.md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n      b = this.md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n\n      a = this.md5hh(a, b, c, d, x[i + 5], 4, -378558);\n      d = this.md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n      c = this.md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n      b = this.md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n      a = this.md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n      d = this.md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n      c = this.md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n      b = this.md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n      a = this.md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n      d = this.md5hh(d, a, b, c, x[i], 11, -358537222);\n      c = this.md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n      b = this.md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n      a = this.md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n      d = this.md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n      c = this.md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n      b = this.md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n\n      a = this.md5ii(a, b, c, d, x[i], 6, -198630844);\n      d = this.md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n      c = this.md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n      b = this.md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n      a = this.md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n      d = this.md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n      c = this.md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n      b = this.md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n      a = this.md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n      d = this.md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n      c = this.md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n      b = this.md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n      a = this.md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n      d = this.md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n      c = this.md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n      b = this.md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n\n      a = this.safeAdd(a, olda);\n      b = this.safeAdd(b, oldb);\n      c = this.safeAdd(c, oldc);\n      d = this.safeAdd(d, oldd);\n    }\n    return [a, b, c, d];\n  },\n  binl2rstr(input) {\n    var i;\n    var output = '';\n    var length32 = input.length * 32;\n    for (i = 0; i < length32; i += 8) {\n      output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xff);\n    }\n    return output;\n  },\n  rstr2binl(input) {\n    var i;\n    var output = [];\n    output[(input.length >> 2) - 1] = undefined;\n    for (i = 0; i < output.length; i += 1) {\n      output[i] = 0;\n    }\n    var length8 = input.length * 8;\n    for (i = 0; i < length8; i += 8) {\n      output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << (i % 32);\n    }\n    return output;\n  },\n  rstrMD5(s) {\n    return this.binl2rstr(this.binlMD5(this.rstr2binl(s), s.length * 8));\n  },\n  rstrHMACMD5(key, data) {\n    var i;\n    var bkey = this.rstr2binl(key);\n    var ipad = [];\n    var opad = [];\n    var hash;\n    ipad[15] = opad[15] = undefined;\n    if (bkey.length > 16) {\n      bkey = this.binlMD5(bkey, key.length * 8);\n    }\n    for (i = 0; i < 16; i += 1) {\n      ipad[i] = bkey[i] ^ 0x36363636;\n      opad[i] = bkey[i] ^ 0x5c5c5c5c;\n    }\n    hash = this.binlMD5(ipad.concat(this.rstr2binl(data)), 512 + data.length * 8);\n    return this.binl2rstr(this.binlMD5(opad.concat(hash), 512 + 128));\n  },\n  rstr2hex(input) {\n    var hexTab = '0123456789abcdef';\n    var output = '';\n    var x;\n    var i;\n    for (i = 0; i < input.length; i += 1) {\n      x = input.charCodeAt(i);\n      output += hexTab.charAt((x >>> 4) & 0x0f) + hexTab.charAt(x & 0x0f);\n    }\n    return output;\n  },\n  str2rstrUTF8(input) {\n    return unescape(encodeURIComponent(input));\n  },\n  rawMD5(s) {\n    return this.rstrMD5(this.str2rstrUTF8(s));\n  },\n  hexMD5(s) {\n    return this.rstr2hex(this.rawMD5(s));\n  },\n  rawHMACMD5(k, d) {\n    return this.rstrHMACMD5(this.str2rstrUTF8(k), str2rstrUTF8(d));\n  },\n  hexHMACMD5(k, d) {\n    return this.rstr2hex(this.rawHMACMD5(k, d));\n  },\n\n  md5(string, key, raw) {\n    if (!key) {\n      if (!raw) {\n        return this.hexMD5(string);\n      }\n      return this.rawMD5(string);\n    }\n    if (!raw) {\n      return this.hexHMACMD5(key, string);\n    }\n    return this.rawHMACMD5(key, string);\n  },\n  /**\n   * 得到md5加密后的sig参数\n   * @param {Object} requestParam 接口参数\n   * @param {String} sk签名字符串\n   * @param {String} featrue 方法名\n   * @return 返回加密后的sig参数\n   */\n  getSig(requestParam, sk, feature, mode) {\n    var sig = null;\n    var requestArr = [];\n    Object.keys(requestParam).sort().forEach(function (key) {\n      requestArr.push(key + '=' + requestParam[key]);\n    });\n    if (feature == 'search') {\n      sig = '/ws/place/v1/search?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'suggest') {\n      sig = '/ws/place/v1/suggestion?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'reverseGeocoder') {\n      sig = '/ws/geocoder/v1/?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'geocoder') {\n      sig = '/ws/geocoder/v1/?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'getCityList') {\n      sig = '/ws/district/v1/list?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'getDistrictByCityId') {\n      sig = '/ws/district/v1/getchildren?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'calculateDistance') {\n      sig = '/ws/distance/v1/?' + requestArr.join('&') + sk;\n    }\n    if (feature == 'direction') {\n      sig = '/ws/direction/v1/' + mode + '?' + requestArr.join('&') + sk;\n    }\n    sig = this.md5(sig);\n    return sig;\n  },\n  /**\n   * 得到终点query字符串\n   * @param {Array|String} 检索数据\n   */\n  location2query(data) {\n    if (typeof data == 'string') {\n      return data;\n    }\n    var query = '';\n    for (var i = 0; i < data.length; i++) {\n      var d = data[i];\n      if (!!query) {\n        query += ';';\n      }\n      if (d.location) {\n        query = query + d.location.lat + ',' + d.location.lng;\n      }\n      if (d.latitude && d.longitude) {\n        query = query + d.latitude + ',' + d.longitude;\n      }\n    }\n    return query;\n  },\n\n  /**\n   * 计算角度\n   */\n  rad(d) {\n    return d * Math.PI / 180.0;\n  },\n  /**\n   * 处理终点location数组\n   * @return 返回终点数组\n   */\n  getEndLocation(location) {\n    var to = location.split(';');\n    var endLocation = [];\n    for (var i = 0; i < to.length; i++) {\n      endLocation.push({\n        lat: parseFloat(to[i].split(',')[0]),\n        lng: parseFloat(to[i].split(',')[1])\n      })\n    }\n    return endLocation;\n  },\n\n  /**\n   * 计算两点间直线距离\n   * @param a 表示纬度差\n   * @param b 表示经度差\n   * @return 返回的是距离，单位m\n   */\n  getDistance(latFrom, lngFrom, latTo, lngTo) {\n    var radLatFrom = this.rad(latFrom);\n    var radLatTo = this.rad(latTo);\n    var a = radLatFrom - radLatTo;\n    var b = this.rad(lngFrom) - this.rad(lngTo);\n    var distance = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) + Math.cos(radLatFrom) * Math.cos(radLatTo) * Math.pow(Math.sin(b / 2), 2)));\n    distance = distance * EARTH_RADIUS;\n    distance = Math.round(distance * 10000) / 10000;\n    return parseFloat(distance.toFixed(0));\n  },\n  /**\n   * 使用微信接口进行定位\n   */\n  getWXLocation(success, fail, complete) {\n    wx.getLocation({\n      type: 'gcj02',\n      success: success,\n      fail: fail,\n      complete: complete\n    });\n  },\n\n  /**\n   * 获取location参数\n   */\n  getLocationParam(location) {\n    if (typeof location == 'string') {\n      var locationArr = location.split(',');\n      if (locationArr.length === 2) {\n        location = {\n          latitude: location.split(',')[0],\n          longitude: location.split(',')[1]\n        };\n      } else {\n        location = {};\n      }\n    }\n    return location;\n  },\n\n  /**\n   * 回调函数默认处理\n   */\n  polyfillParam(param) {\n    param.success = param.success || function () { };\n    param.fail = param.fail || function () { };\n    param.complete = param.complete || function () { };\n  },\n\n  /**\n   * 验证param对应的key值是否为空\n   * \n   * @param {Object} param 接口参数\n   * @param {String} key 对应参数的key\n   */\n  checkParamKeyEmpty(param, key) {\n    if (!param[key]) {\n      var errconf = this.buildErrorConfig(ERROR_CONF.PARAM_ERR, ERROR_CONF.PARAM_ERR_MSG + key + '参数格式有误');\n      param.fail(errconf);\n      param.complete(errconf);\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * 验证参数中是否存在检索词keyword\n   * \n   * @param {Object} param 接口参数\n   */\n  checkKeyword(param) {\n    return !this.checkParamKeyEmpty(param, 'keyword');\n  },\n\n  /**\n   * 验证location值\n   * \n   * @param {Object} param 接口参数\n   */\n  checkLocation(param) {\n    var location = this.getLocationParam(param.location);\n    if (!location || !location.latitude || !location.longitude) {\n      var errconf = this.buildErrorConfig(ERROR_CONF.PARAM_ERR, ERROR_CONF.PARAM_ERR_MSG + ' location参数格式有误');\n      param.fail(errconf);\n      param.complete(errconf);\n      return false;\n    }\n    return true;\n  },\n\n  /**\n   * 构造错误数据结构\n   * @param {Number} errCode 错误码\n   * @param {Number} errMsg 错误描述\n   */\n  buildErrorConfig(errCode, errMsg) {\n    return {\n      status: errCode,\n      message: errMsg\n    };\n  },\n\n  /**\n   * \n   * 数据处理函数\n   * 根据传入参数不同处理不同数据\n   * @param {String} feature 功能名称\n   * search 地点搜索\n   * suggest关键词提示\n   * reverseGeocoder逆地址解析\n   * geocoder地址解析\n   * getCityList获取城市列表：父集\n   * getDistrictByCityId获取区县列表：子集\n   * calculateDistance距离计算\n   * @param {Object} param 接口参数\n   * @param {Object} data 数据\n   */\n  handleData(param, data, feature) {\n    if (feature == 'search') {\n      var searchResult = data.data;\n      var searchSimplify = [];\n      for (var i = 0; i < searchResult.length; i++) {\n        searchSimplify.push({\n          id: searchResult[i].id || null,\n          title: searchResult[i].title || null,\n          latitude: searchResult[i].location && searchResult[i].location.lat || null,\n          longitude: searchResult[i].location && searchResult[i].location.lng || null,\n          address: searchResult[i].address || null,\n          category: searchResult[i].category || null,\n          tel: searchResult[i].tel || null,\n          adcode: searchResult[i].ad_info && searchResult[i].ad_info.adcode || null,\n          city: searchResult[i].ad_info && searchResult[i].ad_info.city || null,\n          district: searchResult[i].ad_info && searchResult[i].ad_info.district || null,\n          province: searchResult[i].ad_info && searchResult[i].ad_info.province || null\n        })\n      }\n      param.success(data, {\n        searchResult: searchResult,\n        searchSimplify: searchSimplify\n      })\n    } else if (feature == 'suggest') {\n      var suggestResult = data.data;\n      var suggestSimplify = [];\n      for (var i = 0; i < suggestResult.length; i++) {\n        suggestSimplify.push({\n          adcode: suggestResult[i].adcode || null,\n          address: suggestResult[i].address || null,\n          category: suggestResult[i].category || null,\n          city: suggestResult[i].city || null,\n          district: suggestResult[i].district || null,\n          id: suggestResult[i].id || null,\n          latitude: suggestResult[i].location && suggestResult[i].location.lat || null,\n          longitude: suggestResult[i].location && suggestResult[i].location.lng || null,\n          province: suggestResult[i].province || null,\n          title: suggestResult[i].title || null,\n          type: suggestResult[i].type || null\n        })\n      }\n      param.success(data, {\n        suggestResult: suggestResult,\n        suggestSimplify: suggestSimplify\n      })\n    } else if (feature == 'reverseGeocoder') {\n      var reverseGeocoderResult = data.result;\n      var reverseGeocoderSimplify = {\n        address: reverseGeocoderResult.address || null,\n        latitude: reverseGeocoderResult.location && reverseGeocoderResult.location.lat || null,\n        longitude: reverseGeocoderResult.location && reverseGeocoderResult.location.lng || null,\n        adcode: reverseGeocoderResult.ad_info && reverseGeocoderResult.ad_info.adcode || null,\n        city: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.city || null,\n        district: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.district || null,\n        nation: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.nation || null,\n        province: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.province || null,\n        street: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.street || null,\n        street_number: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.street_number || null,\n        recommend: reverseGeocoderResult.formatted_addresses && reverseGeocoderResult.formatted_addresses.recommend || null,\n        rough: reverseGeocoderResult.formatted_addresses && reverseGeocoderResult.formatted_addresses.rough || null\n      };\n      if (reverseGeocoderResult.pois) {//判断是否返回周边poi\n        var pois = reverseGeocoderResult.pois;\n        var poisSimplify = [];\n        for (var i = 0; i < pois.length; i++) {\n          poisSimplify.push({\n            id: pois[i].id || null,\n            title: pois[i].title || null,\n            latitude: pois[i].location && pois[i].location.lat || null,\n            longitude: pois[i].location && pois[i].location.lng || null,\n            address: pois[i].address || null,\n            category: pois[i].category || null,\n            adcode: pois[i].ad_info && pois[i].ad_info.adcode || null,\n            city: pois[i].ad_info && pois[i].ad_info.city || null,\n            district: pois[i].ad_info && pois[i].ad_info.district || null,\n            province: pois[i].ad_info && pois[i].ad_info.province || null\n          })\n        }\n        param.success(data, {\n          reverseGeocoderResult: reverseGeocoderResult,\n          reverseGeocoderSimplify: reverseGeocoderSimplify,\n          pois: pois,\n          poisSimplify: poisSimplify\n        })\n      } else {\n        param.success(data, {\n          reverseGeocoderResult: reverseGeocoderResult,\n          reverseGeocoderSimplify: reverseGeocoderSimplify\n        })\n      }\n    } else if (feature == 'geocoder') {\n      var geocoderResult = data.result;\n      var geocoderSimplify = {\n        title: geocoderResult.title || null,\n        latitude: geocoderResult.location && geocoderResult.location.lat || null,\n        longitude: geocoderResult.location && geocoderResult.location.lng || null,\n        adcode: geocoderResult.ad_info && geocoderResult.ad_info.adcode || null,\n        province: geocoderResult.address_components && geocoderResult.address_components.province || null,\n        city: geocoderResult.address_components && geocoderResult.address_components.city || null,\n        district: geocoderResult.address_components && geocoderResult.address_components.district || null,\n        street: geocoderResult.address_components && geocoderResult.address_components.street || null,\n        street_number: geocoderResult.address_components && geocoderResult.address_components.street_number || null,\n        level: geocoderResult.level || null\n      };\n      param.success(data, {\n        geocoderResult: geocoderResult,\n        geocoderSimplify: geocoderSimplify\n      });\n    } else if (feature == 'getCityList') {\n      var provinceResult = data.result[0];\n      var cityResult = data.result[1];\n      var districtResult = data.result[2];\n      param.success(data, {\n        provinceResult: provinceResult,\n        cityResult: cityResult,\n        districtResult: districtResult\n      });\n    } else if (feature == 'getDistrictByCityId') {\n      var districtByCity = data.result[0];\n      param.success(data, districtByCity);\n    } else if (feature == 'calculateDistance') {\n      var calculateDistanceResult = data.result.elements;\n      var distance = [];\n      for (var i = 0; i < calculateDistanceResult.length; i++) {\n        distance.push(calculateDistanceResult[i].distance);\n      }\n      param.success(data, {\n        calculateDistanceResult: calculateDistanceResult,\n        distance: distance\n      });\n    } else if (feature == 'direction') {\n      var direction = data.result.routes;\n      param.success(data, direction);\n    } else {\n      param.success(data);\n    }\n  },\n\n  /**\n   * 构造微信请求参数，公共属性处理\n   * \n   * @param {Object} param 接口参数\n   * @param {Object} param 配置项\n   * @param {String} feature 方法名\n   */\n  buildWxRequestConfig(param, options, feature) {\n    var that = this;\n    options.header = { \"content-type\": \"application/json\" };\n    options.method = 'GET';\n    options.success = function (res) {\n      var data = res.data;\n      if (data.status === 0) {\n        that.handleData(param, data, feature);\n      } else {\n        param.fail(data);\n      }\n    };\n    options.fail = function (res) {\n      res.statusCode = ERROR_CONF.WX_ERR_CODE;\n      param.fail(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, res.errMsg));\n    };\n    options.complete = function (res) {\n      var statusCode = +res.statusCode;\n      switch (statusCode) {\n        case ERROR_CONF.WX_ERR_CODE: {\n          param.complete(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, res.errMsg));\n          break;\n        }\n        case ERROR_CONF.WX_OK_CODE: {\n          var data = res.data;\n          if (data.status === 0) {\n            param.complete(data);\n          } else {\n            param.complete(that.buildErrorConfig(data.status, data.message));\n          }\n          break;\n        }\n        default: {\n          param.complete(that.buildErrorConfig(ERROR_CONF.SYSTEM_ERR, ERROR_CONF.SYSTEM_ERR_MSG));\n        }\n\n      }\n    };\n    return options;\n  },\n\n  /**\n   * 处理用户参数是否传入坐标进行不同的处理\n   */\n  locationProcess(param, locationsuccess, locationfail, locationcomplete) {\n    var that = this;\n    locationfail = locationfail || function (res) {\n      res.statusCode = ERROR_CONF.WX_ERR_CODE;\n      param.fail(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, res.errMsg));\n    };\n    locationcomplete = locationcomplete || function (res) {\n      if (res.statusCode == ERROR_CONF.WX_ERR_CODE) {\n        param.complete(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, res.errMsg));\n      }\n    };\n    if (!param.location) {\n      that.getWXLocation(locationsuccess, locationfail, locationcomplete);\n    } else if (that.checkLocation(param)) {\n      var location = Utils.getLocationParam(param.location);\n      locationsuccess(location);\n    }\n  }\n};\n\n\nclass QQMapWX {\n\n  /**\n   * 构造函数\n   * \n   * @param {Object} options 接口参数,key 为必选参数\n   */\n  constructor(options) {\n    if (!options.key) {\n      throw Error('key值不能为空');\n    }\n    this.key = options.key;\n  };\n\n  /**\n   * POI周边检索\n   *\n   * @param {Object} options 接口参数对象\n   * \n   * 参数对象结构可以参考\n   * @see http://lbs.qq.com/webservice_v1/guide-search.html\n   */\n  search(options) {\n    var that = this;\n    options = options || {};\n\n    Utils.polyfillParam(options);\n\n    if (!Utils.checkKeyword(options)) {\n      return;\n    }\n\n    var requestParam = {\n      keyword: options.keyword,\n      orderby: options.orderby || '_distance',\n      page_size: options.page_size || 10,\n      page_index: options.page_index || 1,\n      output: 'json',\n      key: that.key\n    };\n\n    if (options.address_format) {\n      requestParam.address_format = options.address_format;\n    }\n\n    if (options.filter) {\n      requestParam.filter = options.filter;\n    }\n\n    var distance = options.distance || \"1000\";\n    var auto_extend = options.auto_extend || 1;\n    var region = null;\n    var rectangle = null;\n\n    //判断城市限定参数\n    if (options.region) {\n      region = options.region;\n    }\n\n    //矩形限定坐标(暂时只支持字符串格式)\n    if (options.rectangle) {\n      rectangle = options.rectangle;\n    }\n\n    var locationsuccess = function (result) {\n      if (region && !rectangle) {\n        //城市限定参数拼接\n        requestParam.boundary = \"region(\" + region + \",\" + auto_extend + \",\" + result.latitude + \",\" + result.longitude + \")\";\n        if (options.sig) {\n          requestParam.sig = Utils.getSig(requestParam, options.sig, 'search');\n        }\n      } else if (rectangle && !region) {\n        //矩形搜索\n        requestParam.boundary = \"rectangle(\" + rectangle + \")\";\n        if (options.sig) {\n          requestParam.sig = Utils.getSig(requestParam, options.sig, 'search');\n        }\n      } else {\n        requestParam.boundary = \"nearby(\" + result.latitude + \",\" + result.longitude + \",\" + distance + \",\" + auto_extend + \")\";\n        if (options.sig) {\n          requestParam.sig = Utils.getSig(requestParam, options.sig, 'search');\n        }\n      }\n      wx.request(Utils.buildWxRequestConfig(options, {\n        url: URL_SEARCH,\n        data: requestParam\n      }, 'search'));\n    };\n    Utils.locationProcess(options, locationsuccess);\n  };\n\n  /**\n   * sug模糊检索\n   *\n   * @param {Object} options 接口参数对象\n   * \n   * 参数对象结构可以参考\n   * http://lbs.qq.com/webservice_v1/guide-suggestion.html\n   */\n  getSuggestion(options) {\n    var that = this;\n    options = options || {};\n    Utils.polyfillParam(options);\n\n    if (!Utils.checkKeyword(options)) {\n      return;\n    }\n\n    var requestParam = {\n      keyword: options.keyword,\n      region: options.region || '全国',\n      region_fix: options.region_fix || 0,\n      policy: options.policy || 0,\n      page_size: options.page_size || 10,//控制显示条数\n      page_index: options.page_index || 1,//控制页数\n      get_subpois: options.get_subpois || 0,//返回子地点\n      output: 'json',\n      key: that.key\n    };\n    //长地址\n    if (options.address_format) {\n      requestParam.address_format = options.address_format;\n    }\n    //过滤\n    if (options.filter) {\n      requestParam.filter = options.filter;\n    }\n    //排序\n    if (options.location) {\n      var locationsuccess = function (result) {\n        requestParam.location = result.latitude + ',' + result.longitude;\n        if (options.sig) {\n          requestParam.sig = Utils.getSig(requestParam, options.sig, 'suggest');\n        }\n        wx.request(Utils.buildWxRequestConfig(options, {\n          url: URL_SUGGESTION,\n          data: requestParam\n        }, \"suggest\"));\n      };\n      Utils.locationProcess(options, locationsuccess);\n    } else {\n      if (options.sig) {\n        requestParam.sig = Utils.getSig(requestParam, options.sig, 'suggest');\n      }\n      wx.request(Utils.buildWxRequestConfig(options, {\n        url: URL_SUGGESTION,\n        data: requestParam\n      }, \"suggest\"));\n    }\n  };\n\n  /**\n   * 逆地址解析\n   *\n   * @param {Object} options 接口参数对象\n   * \n   * 请求参数结构可以参考\n   * http://lbs.qq.com/webservice_v1/guide-gcoder.html\n   */\n  reverseGeocoder(options) {\n    var that = this;\n    options = options || {};\n    Utils.polyfillParam(options);\n    var requestParam = {\n      coord_type: options.coord_type || 5,\n      get_poi: options.get_poi || 0,\n      output: 'json',\n      key: that.key\n    };\n    if (options.poi_options) {\n      requestParam.poi_options = options.poi_options\n    }\n\n    var locationsuccess = function (result) {\n      requestParam.location = result.latitude + ',' + result.longitude;\n      if (options.sig) {\n        requestParam.sig = Utils.getSig(requestParam, options.sig, 'reverseGeocoder');\n      }\n      wx.request(Utils.buildWxRequestConfig(options, {\n        url: URL_GET_GEOCODER,\n        data: requestParam\n      }, 'reverseGeocoder'));\n    };\n    Utils.locationProcess(options, locationsuccess);\n  };\n\n  /**\n   * 地址解析\n   *\n   * @param {Object} options 接口参数对象\n   * \n   * 请求参数结构可以参考\n   * http://lbs.qq.com/webservice_v1/guide-geocoder.html\n   */\n  geocoder(options) {\n    var that = this;\n    options = options || {};\n    Utils.polyfillParam(options);\n\n    if (Utils.checkParamKeyEmpty(options, 'address')) {\n      return;\n    }\n\n    var requestParam = {\n      address: options.address,\n      output: 'json',\n      key: that.key\n    };\n\n    //城市限定\n    if (options.region) {\n      requestParam.region = options.region;\n    }\n\n    if (options.sig) {\n      requestParam.sig = Utils.getSig(requestParam, options.sig, 'geocoder');\n    }\n\n    wx.request(Utils.buildWxRequestConfig(options, {\n      url: URL_GET_GEOCODER,\n      data: requestParam\n    }, 'geocoder'));\n  };\n\n\n  /**\n   * 获取城市列表\n   *\n   * @param {Object} options 接口参数对象\n   * \n   * 请求参数结构可以参考\n   * http://lbs.qq.com/webservice_v1/guide-region.html\n   */\n  getCityList(options) {\n    var that = this;\n    options = options || {};\n    Utils.polyfillParam(options);\n    var requestParam = {\n      output: 'json',\n      key: that.key\n    };\n\n    if (options.sig) {\n      requestParam.sig = Utils.getSig(requestParam, options.sig, 'getCityList');\n    }\n\n    wx.request(Utils.buildWxRequestConfig(options, {\n      url: URL_CITY_LIST,\n      data: requestParam\n    }, 'getCityList'));\n  };\n\n  /**\n   * 获取对应城市ID的区县列表\n   *\n   * @param {Object} options 接口参数对象\n   * \n   * 请求参数结构可以参考\n   * http://lbs.qq.com/webservice_v1/guide-region.html\n   */\n  getDistrictByCityId(options) {\n    var that = this;\n    options = options || {};\n    Utils.polyfillParam(options);\n\n    if (Utils.checkParamKeyEmpty(options, 'id')) {\n      return;\n    }\n\n    var requestParam = {\n      id: options.id || '',\n      output: 'json',\n      key: that.key\n    };\n\n    if (options.sig) {\n      requestParam.sig = Utils.getSig(requestParam, options.sig, 'getDistrictByCityId');\n    }\n\n    wx.request(Utils.buildWxRequestConfig(options, {\n      url: URL_AREA_LIST,\n      data: requestParam\n    }, 'getDistrictByCityId'));\n  };\n\n  /**\n   * 用于单起点到多终点的路线距离(非直线距离)计算：\n   * 支持两种距离计算方式：步行和驾车。\n   * 起点到终点最大限制直线距离10公里。\n   *\n   * 新增直线距离计算。\n   * \n   * @param {Object} options 接口参数对象\n   * \n   * 请求参数结构可以参考\n   * http://lbs.qq.com/webservice_v1/guide-distance.html\n   */\n  calculateDistance(options) {\n    var that = this;\n    options = options || {};\n    Utils.polyfillParam(options);\n\n    if (Utils.checkParamKeyEmpty(options, 'to')) {\n      return;\n    }\n\n    var requestParam = {\n      mode: options.mode || 'walking',\n      to: Utils.location2query(options.to),\n      output: 'json',\n      key: that.key\n    };\n\n    if (options.from) {\n      options.location = options.from;\n    }\n\n    //计算直线距离\n    if (requestParam.mode == 'straight') {\n      var locationsuccess = function (result) {\n        var locationTo = Utils.getEndLocation(requestParam.to);//处理终点坐标\n        var data = {\n          message: \"query ok\",\n          result: {\n            elements: []\n          },\n          status: 0\n        };\n        for (var i = 0; i < locationTo.length; i++) {\n          data.result.elements.push({//将坐标存入\n            distance: Utils.getDistance(result.latitude, result.longitude, locationTo[i].lat, locationTo[i].lng),\n            duration: 0,\n            from: {\n              lat: result.latitude,\n              lng: result.longitude\n            },\n            to: {\n              lat: locationTo[i].lat,\n              lng: locationTo[i].lng\n            }\n          });\n        }\n        var calculateResult = data.result.elements;\n        var distanceResult = [];\n        for (var i = 0; i < calculateResult.length; i++) {\n          distanceResult.push(calculateResult[i].distance);\n        }\n        return options.success(data, {\n          calculateResult: calculateResult,\n          distanceResult: distanceResult\n        });\n      };\n\n      Utils.locationProcess(options, locationsuccess);\n    } else {\n      var locationsuccess = function (result) {\n        requestParam.from = result.latitude + ',' + result.longitude;\n        if (options.sig) {\n          requestParam.sig = Utils.getSig(requestParam, options.sig, 'calculateDistance');\n        }\n        wx.request(Utils.buildWxRequestConfig(options, {\n          url: URL_DISTANCE,\n          data: requestParam\n        }, 'calculateDistance'));\n      };\n\n      Utils.locationProcess(options, locationsuccess);\n    }\n  };\n\n  /**\n   * 路线规划：\n   * \n   * @param {Object} options 接口参数对象\n   * \n   * 请求参数结构可以参考\n   * https://lbs.qq.com/webservice_v1/guide-road.html\n   */\n  direction(options) {\n    var that = this;\n    options = options || {};\n    Utils.polyfillParam(options);\n\n    if (Utils.checkParamKeyEmpty(options, 'to')) {\n      return;\n    }\n\n    var requestParam = {\n      output: 'json',\n      key: that.key\n    };\n\n    //to格式处理\n    if (typeof options.to == 'string') {\n      requestParam.to = options.to;\n    } else {\n      requestParam.to = options.to.latitude + ',' + options.to.longitude;\n    }\n    //初始化局部请求域名\n    var SET_URL_DIRECTION = null;\n    //设置默认mode属性\n    options.mode = options.mode || MODE.driving;\n\n    //设置请求域名\n    SET_URL_DIRECTION = URL_DIRECTION + options.mode;\n\n    if (options.from) {\n      options.location = options.from;\n    }\n\n    if (options.mode == MODE.driving) {\n      if (options.from_poi) {\n        requestParam.from_poi = options.from_poi;\n      }\n      if (options.heading) {\n        requestParam.heading = options.heading;\n      }\n      if (options.speed) {\n        requestParam.speed = options.speed;\n      }\n      if (options.accuracy) {\n        requestParam.accuracy = options.accuracy;\n      }\n      if (options.road_type) {\n        requestParam.road_type = options.road_type;\n      }\n      if (options.to_poi) {\n        requestParam.to_poi = options.to_poi;\n      }\n      if (options.from_track) {\n        requestParam.from_track = options.from_track;\n      }\n      if (options.waypoints) {\n        requestParam.waypoints = options.waypoints;\n      }\n      if (options.policy) {\n        requestParam.policy = options.policy;\n      }\n      if (options.plate_number) {\n        requestParam.plate_number = options.plate_number;\n      }\n    }\n\n    if (options.mode == MODE.transit) {\n      if (options.departure_time) {\n        requestParam.departure_time = options.departure_time;\n      }\n      if (options.policy) {\n        requestParam.policy = options.policy;\n      }\n    }\n\n    var locationsuccess = function (result) {\n      requestParam.from = result.latitude + ',' + result.longitude;\n      if (options.sig) {\n        requestParam.sig = Utils.getSig(requestParam, options.sig, 'direction', options.mode);\n      }\n      wx.request(Utils.buildWxRequestConfig(options, {\n        url: SET_URL_DIRECTION,\n        data: requestParam\n      }, 'direction'));\n    };\n\n    Utils.locationProcess(options, locationsuccess);\n  }\n};\n\nexport default new QQMapWX({ key: 'B46BZ-TDXKW-Q5WRQ-OIKGT-UCW4K-6QBXD' });"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AA4BA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7CA;AA3BA;AAAA;AAAA;AACA;AAyEA;AACA;AADA;AAIA;AACA;AACA;AADA;AAGA;AAJA;AAOA;AACA;AACA;AACA;AAHA;AAMA;AACA;AADA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAJA;AAFA;AASA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAjBA;AAoBA;AACA;AACA;AACA;AAEA;AACA;AAHA;AAxHA;AACA;AACA;AA8HA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAOA;AAlJA;AACA;AACA;AAoJA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAFA;AADA;AAMA;AAEA;AACA;AAEA;AAFA;AADA;AAFA;AASA;AAhBA;AAFA;AADA;AAwBA;AAAA;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AARA;AADA;AAsBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAPA;AAvBA;AAkCA;AA3CA;AA8CA;AAEA;AACA;AAHA;AA/HA;AAqIA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAfA;AACA;AAgBA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAPA;AA7BA;AAuCA;AACA;AAtNA;AAvJA;AACA;AACA;AAgXA;AACA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AApBA;AA7YA;AACA;AA2aA;;;;;;;;;;;;AC/bA;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAKA;AACA;AAAA;;;;;;;;;;;;ACpGA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AAhBA;AACA;AAiBA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAOA;;;;;;;;;;;AC/CA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;AAaA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAhBA;AAmBA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA5mBA;AACA;AA+mBA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AALA;AACA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAPA;AAYA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;;;;AACA;AAEA;AAAA;AAAA;;;;A","sourceRoot":""}