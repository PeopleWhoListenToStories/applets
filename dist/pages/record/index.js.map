{"version":3,"file":"pages/record/index.js","sources":["webpack:///./src/pages/record/index.tsx","webpack:///./node_modules/taro-ui/dist/style/components/swipe-action.scss","webpack:///./src/components/Histogram/index.scss","webpack:///./src/components/Histogram/index.tsx","webpack:///./src/pages/record/components/createFlag.scss","webpack:///./src/pages/record/components/createFlag.tsx","webpack:///./src/pages/record/index.scss","webpack:///./src/pages/record/index.tsx?3b78"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Taro, { useDidShow } from \"@tarojs/taro\"\nimport { AtSwipeAction } from \"taro-ui\"\nimport { View, Text, Button, CoverImage, Icon, Picker, Checkbox, RadioGroup } from \"@tarojs/components\"\nimport { Toast } from '../../utils/tool'\n\nimport CreateFlag from \"./components/createFlag\"\nimport Histogram from \"../../components/Histogram/index\"\nimport {\n    getRecordList,\n    removeFlagType,\n    getRecordAllList,\n    removeDayFlagType,\n    getRecordMonthList,\n    recordChangeStatus\n} from \"../../service/apiModules/api\"\nimport \"taro-ui/dist/style/components/swipe-action.scss\";\nimport \"../../../config\"\nimport \"./index.scss\"\n\nconst Record: React.FC = () => {\n    const [navMenu, setNavMenu] = useState(['今日', '全部', '图表'])\n    const [currentMenu, setCurrentMenu] = useState('今日')\n    const [todayList, setTodayList] = useState([])\n    const [allList, setAllList] = useState([])\n    const [chartList, setChartList] = useState([])\n    const [off, setOff] = useState(false)\n    const [date, setDate] = useState([new Date().getFullYear(), new Date().getMonth() + 1, new Date().getDate()])\n\n    useDidShow(() => {\n        getList()\n        getChartList()\n        Taro.setNavigationBarTitle({\n            title: \"每日一记\"\n        })\n    })\n\n\n    useEffect(() => {\n        getAllList()\n        return () => { }\n    }, [date])\n\n    async function getList() {\n        const result = await getRecordList()\n        if (result.data.status === 200) {\n            setTodayList(result.data.data)\n        }\n    }\n\n    async function getAllList() {\n        const result = await getRecordAllList({\n            year: date[0],\n            month: date[1],\n            day: date[2]\n        })\n        if (result.data.status === 200) {\n            setAllList(result.data.data)\n        }\n    }\n\n    async function getChartList() {\n        const result = await getRecordMonthList({\n            year: date[0],\n            month: date[1]\n        })\n        if (result.data.status === 200) {\n            setChartList(result.data.data)\n        }\n    }\n\n    async function changeStatus(status: any, user_id: string, type_id: number) {\n        const result = await recordChangeStatus({\n            status: +status === 1 ? 0 : 1,\n            user_id,\n            type_id\n        })\n        if (result.data.status === 200) {\n            getList()\n        }\n    }\n\n    function showCreateFlag(type) {\n        setOff(type === 'close' ? false : true)\n        getList()\n    }\n\n    function onDateChange(e) {\n        const searchDate = e.detail.value.split('-')\n        setDate([searchDate[0], searchDate[1].startsWith('0') ? searchDate[1].substr(1) : searchDate[1], searchDate[2].startsWith('0') ? searchDate[2].substr(1) : searchDate[2]])\n    }\n\n    function setMenu(index) {\n        setCurrentMenu(navMenu[index])\n        switch (index) {\n            case 0:\n                getList()\n                break;\n            case 1:\n                getAllList()\n                break;\n            case 2:\n                getChartList()\n                break;\n            default:\n                break;\n        }\n    }\n\n    async function handleClick(e, type_id) {\n        if (e.text === '确认') {\n            const { data } = await removeFlagType(type_id)\n            if (data.status === 200) {\n                Toast('删除成功', 'success', 500)\n                let timer = setTimeout(() => {\n                    getList()\n                    clearTimeout(timer)\n                }, 300)\n            }\n        }\n    }\n\n    async function handleAllClick(e, type_id) {\n        if (e.text === '确认') {\n            const { data } = await removeDayFlagType({ type_id, updateTime: date[0] + '-' + date[1] + '-' + date[2] })\n            if (data.status === 200) {\n                Toast('删除成功', 'success', 500)\n                let timer = setTimeout(() => {\n                    getAllList()\n                    clearTimeout(timer)\n                }, 300)\n            }\n        }\n    }\n\n    return (\n        <View className='record'>\n            <View className='recoed_nav'>\n                {\n                    navMenu.map((navName, index) => {\n                        return <Text className={'text ' + (currentMenu === navName ? 'text-active' : '')} key={navName} onClick={() => { setMenu(index) }}>{navName}</Text>\n                    })\n                }\n            </View>\n\n            {\n                off ? <CreateFlag close={() => showCreateFlag('close')} />\n                    :\n                    <View className='content'>\n                        {\n                            currentMenu === '全部' && <View className='page-section'>\n                                <Picker mode='date' onChange={(e) => { onDateChange(e) }}>\n                                    <View className='picker'>\n                                        {date[0]} - {date[1]} - {date[2]}\n                                    </View>\n                                </Picker>\n                            </View>\n                        }\n                        {\n                            currentMenu === '今日' && (todayList.length ? todayList.map((item: any) => {\n                                return <AtSwipeAction autoClose={true} onClick={(e) => { handleClick(e, item.type_id) }} options={[{ text: '取消', style: { backgroundColor: '#6190E8' } }, { text: '确认', style: { backgroundColor: '#FF4949' } }]}>\n                                    <View className='normal item' key={item.user_id}>\n                                        <Text > {item.label}  </Text>\n                                        <RadioGroup onChange={() => { changeStatus(item.status, item.user_id, item.type_id) }}>\n                                            <Checkbox checked={item.status === '1'} />\n                                        </RadioGroup>\n                                    </View>\n                                </AtSwipeAction>\n                            }) : <CoverImage className='img' src={(global as any).constants.icon.zanwushujuIcon} />)\n                        }\n                        {\n                            currentMenu === '全部' && (allList.length ? allList.map((item: any) => {\n                                return <AtSwipeAction autoClose={true} onClick={(e) => { handleAllClick(e, item.type_id) }} options={[{ text: '取消', style: { backgroundColor: '#6190E8' } }, { text: '确认', style: { backgroundColor: '#FF4949' } }]}>\n                                    <View className='item' key={item.user_id}>\n                                        <Text > {item.label}  </Text>\n                                        {\n                                            item.status === '1' ? <Icon size='20' type='success' /> : <Icon size='20' type='waiting' />\n                                        }\n                                    </View>\n                                </AtSwipeAction>\n                            }) : <CoverImage className='img' src={(global as any).constants.icon.zanwushujuIcon} />)\n                        }\n                    </View>\n            }\n\n            {\n                !off && currentMenu === '今日' && <View className='createFlag'>\n                    <Button size='mini' type='primary' plain onClick={() => { showCreateFlag('show') }}>Flag</Button>\n                </View>\n            }\n            {\n                !off && currentMenu === '图表' && <Histogram defaultData={chartList} />\n            }\n        </View >\n    )\n}\nexport default Record","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","import React, { useState, useEffect } from 'react'\nimport Taro, { useDidShow } from '@tarojs/taro'\nimport { useObserver } from 'mobx-react'\nimport { View, Canvas } from '@tarojs/components'\nimport './index.scss'\n\ninterface InitType {\n    [key: string]: any\n}\n\nconst Histogram: React.FC = (props: any) => {\n    const [defaultState, setDefaultState] = useState({\n        screenWidth: 375, screenHeight: 500,\n    })\n    useEffect(() => {\n        const info = Taro.getSystemInfoSync()\n        setDefaultState({\n            screenWidth: info.screenWidth,\n            screenHeight: 500//info.screenHeight,\n        })\n    }, [])\n    goBarChart(props.defaultData)\n\n    //封装绘制图表的方法\n    function goBarChart(params) {\n        // 获得canvas上下文\n        let ctx = Taro.createCanvasContext('Histogram', this);\n        let initObj: InitType = {\n            myCanvas: null,\n            width: defaultState.screenWidth,\n            height: defaultState.screenHeight,\n            cWidth: 0,\n            cHeight: 0,\n            cMargin: 20,\n            cSpace: 20,\n            originX: null,\n            originY: null,\n            bMargin: 15,\n            tobalBars: null,\n            bWidth: null,\n            maxValue: 0,\n            totalYNomber: 10,\n            ctr: 1,\n            numctr: 100,\n            speed: 10,\n            gradient: null,\n            xTitle: params.xTitle || '',\n            yTitle: params.yTitle || ''\n        }\n        if (ctx && (ctx as any)._context) {\n            initObj.myCanvas = (ctx as any)._context.canvas\n        } else {\n            initObj.myCanvas = ctx\n        }\n        //鼠标移动\n        var mousePosition = {};\n        //     // 图表信息\n        initObj.cHeight = initObj.height - initObj.cMargin * 2 - initObj.cSpace;\n        initObj.cWidth = initObj.width - initObj.cMargin * 2 - initObj.cSpace;\n        initObj.originX = initObj.cMargin + initObj.cSpace;\n        initObj.originY = initObj.cMargin + initObj.cHeight;\n        //     // 柱状图信息\n        initObj.tobalBars = params.dataArr.length;\n\n        initObj.bWidth = parseInt(initObj.cWidth / initObj.tobalBars - initObj.bMargin + '');\n        for (var i = 0; i < params.dataArr.length; i++) {\n            var barVal = parseInt(params.dataArr[i][1]);\n            if (barVal > initObj.maxValue) {\n                initObj.maxValue = barVal;\n            }\n        }\n        initObj.maxValue += 50;\n        // //柱状图渐变色\n        initObj.gradient = ctx.createLinearGradient(0, 0, 0, 300);\n        initObj.gradient.addColorStop(0, 'green');\n        initObj.gradient.addColorStop(1, 'rgba(67,203,36,1)');\n\n        drawLineLabelMarkers(ctx, initObj)\n        // 绘制标记\n        drawMarkers(ctx, params.dataArr, initObj)\n        //绘制柱形图\n        drawBarAnimate(ctx, params.dataArr, initObj, false); // 绘制柱状图的动画\n        //检测鼠标移动\n        // var mouseTimer: any = null;\n        // initObj.myCanvas.addEventListener(\"touchmove\", function (e) {\n        //     e = e || window.event;\n        //     if (e.layerX || e.layerX == 0) {\n        //         initObj.mousePosition.x = e.layerX;\n        //         initObj.mousePosition.y = e.layerY;\n        //     } else if (e.offsetX || e.offsetX == 0) {\n        //         initObj.mousePosition.x = e.offsetX;\n        //         initObj.mousePosition.y = e.offsetY;\n        //     }\n\n        //     clearTimeout(mouseTimer);\n        //     mouseTimer = setTimeout(function () {\n        //         ctx.clearRect(0, 0, initObj.width, initObj.height);\n        //         drawLineLabelMarkers(ctx, initObj)\n        //         drawBarAnimate(ctx, dataArr, initObj, true); // 绘制柱状图的动画\n        //     }, 10);\n        // });\n        //点击刷新图表\n        // initObj.myCanvas.ontouchstart = function () {\n        //     // initChart(); // 图表初始化\n        //     // drawLineLabelMarkers(); // 绘制图表轴、标签和标记\n        //     // drawBarAnimate(); // 绘制折线图的动画\n        // };\n        ctx.draw()\n    }\n\n    // 绘制图表轴、标签和标记\n    function drawLineLabelMarkers(ctx, initObj) {\n        const { originX, originY, cMargin, cWidth } = initObj\n        ctx.translate(0.5, 0.5);  // 当只绘制1像素的线的时候，坐标点需要偏移，这样才能画出1像素实线\n        ctx.font = \"12px Arial\";\n        ctx.lineWidth = 1;\n        ctx.fillStyle = \"#000\";\n        ctx.strokeStyle = \"#000\";\n        // y轴\n        drawLine(ctx, originX, originY, originX, cMargin);\n        // x轴\n        drawLine(ctx, originX, originY, originX + cWidth, originY)\n        ctx.translate(-0.5, -0.5);  // 还原位置\n    }\n\n    // 画线的方法\n    function drawLine(ctx, x, y, X, Y) {\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n        ctx.lineTo(X, Y);\n        ctx.stroke();\n        ctx.closePath();\n    }\n\n    // 绘制标记\n    function drawMarkers(ctx, dataArr, initObj) {\n        const { width, xTitle, yTitle, maxValue, totalYNomber, originX, cHeight, cMargin, cSpace, cWidth, tobalBars, bMargin, bWidth, originY } = initObj\n        ctx.strokeStyle = \"#E0E0E0\";\n        // 绘制 y\n        let oneVal = parseInt(maxValue / totalYNomber + '');\n        ctx.textAlign = \"right\";\n        ctx.font = \"10px Calibri\";\n        for (var i = 0; i <= totalYNomber; i++) {\n            let markerVal = Math.floor(i * oneVal / 100) * 100;\n            // let markerVal = i * oneVal;\n            let xMarker = originX - 5;\n            let yMarker = parseInt(cHeight * (1 - markerVal / maxValue) + '') + cMargin;\n            ctx.fillText(markerVal, xMarker, yMarker + 3, cSpace); // 文字\n            if (i > 0) {\n                drawLine(ctx, originX, yMarker, originX + cWidth, yMarker);\n            }\n        }\n        // 绘制 x\n        ctx.textAlign = \"center\";\n        for (var i = 0; i < tobalBars; i++) {\n            let markerVal = dataArr[i][0];\n            var xMarker = parseInt(originX + cWidth * (i / tobalBars) + bMargin + bWidth / 2);\n            var yMarker = originY + 15;\n            ctx.fillText(markerVal, xMarker, yMarker, cSpace); // 文字\n        }\n        // 绘制标题 y\n        ctx.save();\n        ctx.rotate(-Math.PI / 2);\n        ctx.fillText(yTitle, -width / 2 - 50, cSpace - 8);\n        ctx.restore();\n        // 绘制标题 x\n        ctx.fillText(xTitle, originX + cWidth / 2, originY + 30);\n    };\n\n    //绘制柱形图\n    function drawBarAnimate(ctx, dataArr, initObj, isMouseMove = false) {\n        let { canvas, width, cMargin, cSpace, tobalBars, maxValue, totalYNomber, cHeight, originX, originY, bWidth, bMargin, gradient, mousePosition } = initObj\n        let space: number = 0;\n        for (var i = 0; i < tobalBars; i++) {\n            var oneVal = parseInt(maxValue / totalYNomber + '');\n            var barVal = dataArr[i][1];\n            // var barH = parseInt(cHeight * barVal / maxValue * ctr / numctr + '');\n            var barH = parseInt(cHeight / maxValue * barVal + '');\n            var y = originY - barH;\n            var x = originX + (bWidth + bMargin) * i + bMargin;\n            space = (width - cMargin * 2 - cSpace * 2 - ((dataArr.length + 1) * 10)) / dataArr.length / 2\n            drawRect(canvas, ctx, x, y, bWidth, barH, mousePosition, gradient, isMouseMove);  //高度减一避免盖住x轴\n            ctx.fillText(barVal, x + space, y - 8); // 文字\n        }\n        // if (ctr < numctr) {\n        //     ctr++;\n        //     setTimeout(function () {\n        //         ctx.clearRect(0, 0, width, height);\n        //         drawLineLabelMarkers(ctx, initObj);\n        //         drawBarAnimate(ctx, dataArr, initObj);\n        //     }, speed);\n        // }\n    }\n\n    //绘制方块\n    function drawRect(canvas, ctx, x, y, X, Y, mousePosition, gradient, mouseMove) {\n        ctx.beginPath();\n        ctx.rect(x, y, X, Y);\n        if (mouseMove && canvas.isPointInPath(mousePosition.x, mousePosition.y)) { //如果是鼠标移动的到柱状图上，重新绘制图表\n            ctx.fillStyle = \"green\";\n        } else {\n            ctx.fillStyle = gradient;\n            ctx.strokeStyle = gradient;\n        }\n        ctx.fill();\n        ctx.closePath();\n    }\n\n    function move(e) {\n        console.log(e)\n    }\n\n    return useObserver(() => (\n        <View className='container'>\n            <Canvas style={{ width: defaultState.screenWidth, height: defaultState.screenHeight }} canvasId='Histogram' onLongTap={(e) => { move(e) }}></Canvas>\n        </View >\n    ))\n}\nexport default Histogram\n","// extracted by mini-css-extract-plugin","import React, { useState } from 'react'\nimport Taro from \"@tarojs/taro\"\nimport { View, Button, Textarea } from \"@tarojs/components\"\nimport { createType } from \"../../../service/apiModules/api\"\nimport \"./createFlag.scss\"\n\nconst CreateFlag: React.FC = (props: any) => {\n    const [value, setValue] = useState('')\n\n    async function save() {\n        if (!value) {\n            Taro.showToast({\n                title: '您还没有输入',\n                duration: 2000,\n                icon: 'none',\n                mask: true,\n            })\n            return\n        }\n        const result = await createType({ label: value })\n        if (result.data.status === 200) {\n            props.close()\n        } else {\n            Taro.showToast({\n                title: '您录入的Flag已存在·',\n                duration: 2000,\n                icon: 'none',\n                mask: true,\n            })\n        }\n    }\n\n    function changeText(e) {\n        setValue(e)\n    }\n\n    return (\n        <View className='CreateFlag'>\n            {/* <View className=\"close\" onClick={() => { close() }}>X</View> */}\n            <View className='title'>输入创建的标题</View>\n            <Textarea className='text' placeholder='大胆的输入吧！' autoFocus onInput={(e) => { changeText(e.detail.value) }} />\n            <View className='save'>\n                <Button size='mini' type='primary' plain onClick={() => { save() }}>创建</Button>\n            </View>\n        </View>\n    )\n}\nexport default CreateFlag","// extracted by mini-css-extract-plugin","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../node_modules/@tarojs/mini-runner/node_modules/babel-loader/lib/index.js!./index.tsx\"\nvar config = {};\n\n\nvar inst = Page(createPageConfig(component, 'pages/record/index', {}, config || {}))\n\n"],"mappings":"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","sourceRoot":""}