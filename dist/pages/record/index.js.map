{"version":3,"file":"pages/record/index.js","sources":["webpack:///./src/pages/record/index.tsx","webpack:///./src/pages/record/components/createFlag.scss","webpack:///./src/pages/record/components/createFlag.tsx","webpack:///./src/pages/record/index.scss","webpack:///./src/pages/record/index.tsx?3b78","webpack:///./src/service/apiModules/api.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Taro, { useDidShow } from \"@tarojs/taro\"\nimport { View, Text, Button, CoverImage, Icon, Picker, Radio, RadioGroup } from \"@tarojs/components\"\nimport CreateFlag from \"./components/createFlag\"\nimport {\n    getRecordList,\n    getRecordAllList,\n    recordChangeStatus\n} from \"../../service/apiModules/api\"\nimport \"../../../config\"\nimport \"./index.scss\"\n\nconst Record: React.FC = () => {\n    const [navMenu, setNavMenu] = useState(['今日', '全部'])\n    const [currentMenu, setCurrentMenu] = useState('今日')\n    const [todayList, setTodayList] = useState([])\n    const [allList, setAllList] = useState([])\n    const [off, setOff] = useState(false)\n    const [date, setDate] = useState([new Date().getFullYear(), new Date().getMonth() + 1, new Date().getDate()])\n\n    useDidShow(() => {\n        getList()\n        Taro.setNavigationBarTitle({\n            title: \"每日一记\"\n        })\n    })\n\n\n    useEffect(() => {\n        getAllList()\n        return () => { }\n    }, [date])\n\n    async function getList() {\n        const result = await getRecordList()\n        if (result.data.status === 200) {\n            setTodayList(result.data.data)\n        }\n    }\n\n    async function getAllList() {\n        const result = await getRecordAllList({\n            year: date[0],\n            month: date[1],\n            day: date[2]\n        })\n        if (result.data.status === 200) {\n            setAllList(result.data.data)\n        }\n    }\n\n    async function changeStatus(status: null, user_id: string, type_id: number) {\n        const result = await recordChangeStatus({\n            status: 1,\n            user_id,\n            type_id\n        })\n        if (result.data.status === 200) {\n            getList()\n        }\n    }\n\n    function showCreateFlag(type) {\n        setOff(type === 'close' ? false : true)\n        getList()\n    }\n\n    function onDateChange(e) {\n        const searchDate = e.detail.value.split('-')\n        setDate([searchDate[0], searchDate[1].startsWith('0') ? searchDate[1].substr(1) : searchDate[1], searchDate[2].startsWith('0') ? searchDate[2].substr(1) : searchDate[2]])\n    }\n\n    function setMenu(index) {\n        setCurrentMenu(navMenu[index])\n        switch (index) {\n            case 0:\n                getList()\n                break;\n            case 1:\n                getAllList()\n                break;\n            default:\n                break;\n        }\n    }\n\n    return (\n        <View className='record'>\n            <View className='recoed_nav'>\n                {\n                    navMenu.map((navName, index) => {\n                        return <Text className={'text ' + (currentMenu === navName ? 'text-active' : '')} key={navName} onClick={() => { setMenu(index) }}>{navName}</Text>\n                    })\n                }\n            </View>\n            {\n                off ? <CreateFlag close={() => { showCreateFlag('close') }} />\n                    :\n                    <View className='content'>\n                        {\n                            currentMenu === '全部' && <View className='page-section'>\n                                <Picker mode='date' onChange={(e) => { onDateChange(e) }}>\n                                    <View className='picker'>\n                                        {date[0]} - {date[1]} - {date[2]}\n                                    </View>\n                                </Picker>\n                            </View>\n                        }\n                        {\n                            currentMenu === '今日' && (todayList.length ? todayList.map((item: any) => {\n                                return <View className='item' key={item.user_id}>\n                                    <Text > {item.label}  </Text>\n                                    <RadioGroup onChange={() => { changeStatus(null, item.user_id, item.type_id) }}>\n                                        <Radio checked={item.status === '1'} />\n                                    </RadioGroup>\n                                </View>\n                            }) : <CoverImage className='img' src={(global as any).constants.icon.zanwushujuIcon} />)\n                        }\n                        {\n                            currentMenu === '全部' && (allList.length ? allList.map((item: any) => {\n                                return <View className='item' key={item.user_id}>\n                                    <Text > {item.label}  </Text>\n                                    {\n                                        item.status === '1' ? <Icon size='20' type='success' /> : <Icon size='20' type='waiting' />\n                                    }\n                                </View>\n                            }) : <CoverImage className='img' src={(global as any).constants.icon.zanwushujuIcon} />)\n                        }\n                    </View>\n            }\n\n            {\n                !off && currentMenu === '今日' && <View className='createFlag'>\n                    <Button size='mini' type='primary' plain onClick={() => { showCreateFlag('show') }}>Flag</Button>\n                </View>\n            }\n        </View >\n    )\n}\nexport default Record ","// extracted by mini-css-extract-plugin","import React, { useState } from 'react'\nimport Taro from \"@tarojs/taro\"\nimport { View, Button, Textarea } from \"@tarojs/components\"\nimport { createType } from \"../../../service/apiModules/api\"\nimport \"./createFlag.scss\"\n\nconst CreateFlag: React.FC = (props: any) => {\n    const [value, setValue] = useState('')\n\n    async function save() {\n        if (!value) {\n            Taro.showToast({\n                title: '您还没有输入',\n                duration: 2000,\n                icon: 'none',\n                mask: true,\n            })\n            return\n        }\n        const result = await createType({ label: value })\n        if (result.data.status === 200) {\n            props.close()\n        } else {\n            Taro.showToast({\n                title: '您录入的Flag已存在·',\n                duration: 2000,\n                icon: 'none',\n                mask: true,\n            })\n        }\n    }\n\n    function changeText(e) {\n        setValue(e)\n    }\n\n    return (\n        <View className='CreateFlag'>\n            {/* <View className=\"close\" onClick={() => { close() }}>X</View> */}\n            <View className='title'>输入创建的标题</View>\n            <Textarea className='text' placeholder='大胆的输入吧！' autoFocus onInput={(e) => { changeText(e.detail.value) }} />\n            <View className='save'>\n                <Button size='mini' type='primary' plain onClick={() => { save() }}>创建</Button>\n            </View>\n        </View>\n    )\n}\nexport default CreateFlag","// extracted by mini-css-extract-plugin","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../node_modules/@tarojs/mini-runner/node_modules/babel-loader/lib/index.js!./index.tsx\"\nvar config = {};\n\n\nvar inst = Page(createPageConfig(component, 'pages/record/index', {}, config || {}))\n\n","import request from \"../request\"\n\nexport const getRecordList = () => {\n    return request.get('/api/target')\n}\n\nexport const getRecordAllList = (params) => {\n    return request.get('/api/target/date', params)\n}\n\nexport const recordChangeStatus = (params) => {\n    return request.put(`/api/target/${1}`, params)\n}\n\nexport const createType = (params) => {\n    return request.post('/api/target', params)\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AADA;AAFA;AAQA;AACA;AACA;AAFA;AACA;AAjBA;AAAA;AAAA;AACA;AADA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AArBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AACA;AAFA;AACA;AACA;AAIA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AA5BA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAuCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AACA;AAFA;AACA;AACA;AAIA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAvCA;AAAA;AAAA;AACA;AAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AARA;AAUA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AASA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAQA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAJA;AAOA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAOA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzHA;AACA;AA8HA;;;;;;;;;;;;AC3IA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AACA;AADA;AAAA;AAAA;AAUA;AAAA;AACA;AAXA;AAUA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AACA;AAyBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;;;;;;;;;;;AC/CA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;A","sourceRoot":""}