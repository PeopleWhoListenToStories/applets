{"version":3,"file":"pages/my/index.js","sources":["webpack:///./src/pages/my/index.jsx","webpack:///./src/pages/my/components/Photo.less","webpack:///./src/pages/my/components/Phtot.jsx","webpack:///./src/pages/my/index.jsx?87ab","webpack:///./src/pages/my/index.less"],"sourcesContent":["import React, { useState } from 'react'\nimport Taro, { useDidShow, useDidHide } from \"@tarojs/taro\"\nimport { useObserver } from 'mobx-react'\nimport { View, CoverView, CoverImage, Canvas, Text } from '@tarojs/components'\nimport Photo from \"./components/Phtot\"\nimport store from '../../store/index'\nimport { Toast } from \"../../utils/tool\"\nimport { getUserInfo } from \"../../service/apiModules/user\"\nimport \"../../../config\"\nimport \"./index.less\"\n\nexport default function My(props) {\n    const { User } = store\n    const [canvasStyle, setCanvasStyle] = useState({ height: '100rpx', width: '100rpx' })\n\n    useDidShow(() => {\n        getUserInfoFn()\n        Taro.setNavigationBarTitle({\n            title: \"个人中心\"\n        })\n    })\n\n    useDidHide(() => {\n        // console.log('useDidHide')\n    })\n\n    async function getUserInfoFn() {\n        const result = await getUserInfo()\n        if (result.data.status === 200) {\n            User.setuserInfo(result.data.data)\n        }\n    }\n\n    function handleOperaClick(e) {\n        e.preventDefault();\n        let {\n            flag,\n        } = e.currentTarget.dataset;\n        switch (flag) {\n            case 'portrait': {\n                // 从手机相册中选择图片或使用相机拍照\n                // Taro.chooseImage({\n                //     count: 1,\n                //     sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有\n                //     sourceType: ['album', 'camera'],  // 可以指定来源是相册还是相机\n                // }).then(async (res) => {  //我使用链式写法，也可以使用官方文档提供的方式\n                //     console.warn('chooseImage then', res)\n                // const files = [];\n                // // 以下几行代码是为了处理成自己想要的格式[{file: {path: '', size: ''}, url: '' }]\n                // const obj = {};\n                // obj.file = res.tempFiles[0];\n                // obj.url = res.tempFilePaths[0];\n                //     files.push(obj);\n                //     console.warn('then obj', files)\n                //     // 上传到七牛返回的图片连接，可以在线访问\n                //     const itemImgUrlLIst = await utils.transImgList(files || [])\n                //     console.warn('then itemImgUrlLIst', itemImgUrlLIst)\n                //     Taro.showLoading();\n                //     // 把返回的链接传给更换个人信息的接口，完成头像更换\n                //     this.props.dispatch({\n                //         type: 'mine/fecthupdatePersonInfo',\n                //         payload: {\n                //             headImg: itemImgUrlLIst[0]  // 因为是个数组，获取数组第一个元素\n                //         }\n                //     }).then(res => {\n                //         if (res.resultCode === 200) {\n                //             Taro.hideLoading();\n                //             // 更换调全局缓存的数据，要不显示不出来\n                //             const userInfo = getGlobalData('userInfo');\n                //             userInfo.headImg = itemImgUrlLIst[0];\n                //             setGlobalData('userInfo', userInfo);\n                //             this.componentDidMount();\n                //         }\n                //     })\n                // })\n                break;\n            }\n            case 'name': {\n                Taro.navigateTo({\n                    url: `/subMinePages/UpdateName/UpdateName`\n                })\n                break;\n            }\n\n            case 'phone': {\n                Taro.navigateTo({\n                    url: `/subMinePages/UpdatePhone/UpdatePhone`\n                })\n                break;\n            }\n\n            case 'address': {\n                Taro.navigateTo({\n                    url: `/subMinePages/MyAddress/MyAddress`\n                })\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n    }\n\n    // 上传头像调用接口\n    async function upload(imgList = []) {\n        const Taro = require('@tarojs/taro')\n        // const wx = require('m-commonjs-jweixin');\n        //小程序\n        if (process.env.TARO_ENV === 'weapp') {\n            // const base64 = wx.getFileSystemManager().readFileSync(imgList[0].url, 'base64')\n            // const arrayBuffer = Taro.base64ToArrayBuffer(base64)\n            // const result = await postUpLoadImage(arrayBuffer)\n            Taro.showLoading({\n                title: '正在加载',\n                mask: true\n            })\n            Taro.uploadFile({\n                url: `${global.constants.website}/api/updateUserPhoto`, //仅为示例，非真实的接口地址\n                filePath: imgList[0].url,\n                name: 'file',\n                formData: {},\n                header: { 'content-type': 'multipart/form-data', 'authority': Taro.getStorageSync('authority') },\n                success(res) {\n                    const data = JSON.parse(res.data)\n                    if (data.code === 200) {\n                        const userInfo = User.userInfo\n                        userInfo.photo = data.url\n                        User.setuserInfo(userInfo)\n                        Toast('更新成功', 'success', 1000)\n                    } else {\n                        Toast('更新失败', 'none', 1000)\n                    }\n                    Taro.hideLoading()\n                }\n            })\n        }\n    }\n\n    // 修改头像\n    async function uploadImg(e) {\n        if (process.env.TARO_ENV === 'weapp') {\n            const Taro = require('@tarojs/taro')\n            Taro.chooseImage({\n                count: 1,   // 可选图片数量, 这里限制为1张\n                sizeType: ['original', 'compressed'], // 可以指定是原图还是缩图，默认二者都有\n                sourceType: ['album', 'camera'],  // 可以指定来源是相机还是相册，默认二者\n                success(res) {\n                    const files = [];\n                    // 以下几行代码是为了处理成自己想要的格式[{file: {path: '', size: ''}, url: '' }]\n                    const obj = {};\n                    obj.file = res.tempFiles[0];\n                    obj.url = res.tempFilePaths[0];\n                    files.push(obj);\n                    upload(files)\n                    // Taro.getImageInfo({\n                    //     src: res.tempFilePaths[0],\n                    //     success: (res) => {\n                    //         console.log('getImageInfo=>res', res)\n                    //         console.log('getImageInfo=>', res.path)\n                    //         let originW = res.width\n                    //         let originH = res.height\n                    //         //压缩比例\n                    //         //最大尺寸限制，这里我不知道为什么规定的320和420无法压缩到对应的值，只好/3试试，发现可以\n                    //         let maxW = 320 / 3\n                    //         let maxH = 420 / 3\n                    //         //目标尺寸\n                    //         let targetW = originW\n                    //         let targetH = originH\n                    //         if (originW > maxW || originH > maxH) {\n                    //             if (originW / originH > maxW / maxH) {\n                    //                 // 要求宽度*(原生图片比例)=新图片尺寸\n                    //                 targetW = maxW;\n                    //                 targetH = Math.round(maxW * (originH / originW));\n                    //             } else {\n                    //                 targetH = maxH;\n                    //                 targetW = Math.round(maxH * (originW / originH));\n                    //             }\n                    //         }\n                    //         //尝试压缩文件，创建 canvas\n                    //         let ctx = Taro.createCanvasContext('firstCanvas');\n                    //         ctx.clearRect(0, 0, targetW, targetH);\n                    //         console.log(res.path, targetW, targetH)\n                    //         ctx.drawImage(res.path, 0, 0, targetW, targetH);\n                    //         ctx.draw();\n                    //         //设置canvas的长宽\n                    //         setCanvasStyle({\n                    //             width: targetW + 'px',\n                    //             height: targetH + 'px',\n                    //         })\n                    //         setTimeout(() => {\n                    //             Taro.canvasToTempFilePath({\n                    //                 canvasId: 'firstCanvas',\n                    //                 width: targetW,\n                    //                 height: targetH,\n                    //                 success: (res) => {\n                    //                     console.log('画布信息=>', res)\n                    //                     console.log('画布信息=>', res.tempFilePath)\n                    //                     Taro.getImageInfo({\n                    //                         src: res.tempFilePath,\n                    //                         success: (res) => {\n                    //                             console.log('压缩后的res', res)\n                    //                         }\n                    //                     })\n                    //                     this.setState({\n                    //                         tempFilePaths: res.tempFilePath,\n                    //                         hidden: true,\n                    //                         isChanged: true\n                    //                     })\n                    //                     Taro.setStorageSync('userImage', res.tempFilePath)\n                    //                 }\n                    //             })\n                    //         }, 500)\n                    //     }\n                    // })\n                }\n            })\n\n        }\n    }\n\n    // 退出登陆\n    function exitLogin() {\n        Toast('正在退出', 'loading', 1000)\n        User.loginOut()\n        setTimeout(() => {\n            Taro.navigateTo({\n                url: '/pages/notauthority/index'\n            })\n        }, 600)\n    }\n\n    function clickToEmptyPage(name) {\n        Taro.navigateTo({\n            url: '/pages/my/about/index'\n        })\n    }\n\n    return useObserver(() => (\n        <View className=\"container\">\n            <View className=\"nav\">\n                <View className=\"photo\">\n                    <Photo photoUrl={User.userInfo.photo} uploadImg={uploadImg.bind(this)} />\n                </View>\n                <View className=\"info\">\n                    <Text>{User.userInfo.codeName}</Text>\n                </View>\n            </View>\n            <View className=\"content\">\n                <Text className=\"lebalItem\" onClick={() => { clickToEmptyPage('about') }}>关于我们</Text>\n                <Text className=\"lebalItem\" onClick={() => { exitLogin() }}>退出登陆</Text>\n            </View>\n            {/* <CoverView className='play' >\n                <CoverImage className='img' src='../../assets/image/newyear.png' />\n            </CoverView> */}\n        </View>\n    ))\n}\n","// extracted by mini-css-extract-plugin","import React from 'react'\nimport Taro from \"@tarojs/taro\"\nimport { useObserver } from 'mobx-react'\nimport { View, Image } from \"@tarojs/components\"\nimport \"./Photo.less\"\n\nexport default function Phtot(props) {\n    return useObserver(() => (\n        <View className=\"userinfo-img-view portrait flex-box jc-sb ai-ce\" data-flag=\"portrait\">\n            <Image src={props.photoUrl} className='userinfo-img' onClick={(e) => { props.uploadImg(e) }} mode='aspectFill'></Image>\n        </View>\n    ))\n}\n","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../node_modules/@tarojs/mini-runner/node_modules/babel-loader/lib/index.js!./index.jsx\"\nvar config = {};\n\n\nvar inst = Page(createPageConfig(component, 'pages/my/index', {}, config || {}))\n\n","// extracted by mini-css-extract-plugin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AACA;AADA;AAEA;AAAA;AAAA;AAFA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AADA;AAFA;AAOA;AAAA;AACA;AAZA;AAAA;AAAA;AACA;AADA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAAA;AAAA;AACA;AAqBA;AACA;AADA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AA7DA;AA3BA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AA6FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AACA;AAjBA;AAmBA;AACA;AAhCA;AAAA;AAAA;AAAA;AAAA;AAAA;AA7FA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAgIA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxEA;AA2EA;AACA;AA/EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhIA;AAAA;AAAA;AACA;AAiNA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAZA;AAmBA;;;;;;;;;;;;AChQA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;;;;A","sourceRoot":""}