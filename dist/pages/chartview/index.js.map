{"version":3,"file":"pages/chartview/index.js","sources":["webpack:///./src/pages/chartview/index.tsx","webpack:///./src/pages/chartview/index.scss","webpack:///./src/pages/chartview/index.tsx?8cf1"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\nimport Taro, { useDidShow, useDidHide } from '@tarojs/taro'\nimport { useObserver } from 'mobx-react'\nimport { View, Canvas } from '@tarojs/components'\nimport store from '../../store/index'\nimport '../../../config.ts'\nimport './index.scss'\n\ninterface InitType {\n    [key: string]: any\n}\n\nconst ChartView: React.FC = () => {\n    const { User } = store\n    const [defaultState, setDefaultState] = useState({\n        screenWidth: 375, screenHeight: 500,\n    })\n    useDidShow(() => {\n        Taro.setNavigationBarTitle({\n            title: \"图表\"\n        })\n        const info = Taro.getSystemInfoSync()\n        setDefaultState({\n            screenWidth: info.screenWidth,\n            screenHeight: info.screenHeight,\n        })\n        const data = {\n            dataArr: [[2010, 95], [2011, 100], [2012, 101], [2013, 102], [2014, 105], [2015, 99], [2016, 98], [2017, 2001]],\n            xTitle: '横轴标题',\n            yTitle: '纵轴标题'\n        }\n        goBarChart(data)\n    })\n\n    //封装绘制图表的方法\n    function goBarChart(params) {\n        // 获得canvas上下文\n        let ctx = Taro.createCanvasContext('Histogram', this);\n        let initObj: InitType = {\n            myCanvas: null,\n            width: defaultState.screenWidth,\n            height: defaultState.screenHeight,\n            cWidth: 0,\n            cHeight: 0,\n            cMargin: 20,\n            cSpace: 20,\n            originX: null,\n            originY: null,\n            bMargin: 15,\n            tobalBars: null,\n            bWidth: null,\n            maxValue: 0,\n            totalYNomber: 10,\n            ctr: 1,\n            numctr: 100,\n            speed: 10,\n            gradient: null,\n            xTitle: params.xTitle,\n            yTitle: params.yTitle\n        }\n        if (ctx && (ctx as any)._context) {\n            initObj.myCanvas = (ctx as any)._context.canvas\n        } else {\n            initObj.myCanvas = ctx\n        }\n        //鼠标移动\n        var mousePosition = {};\n        //     // 图表信息\n        initObj.cHeight = initObj.height - initObj.cMargin * 2 - initObj.cSpace;\n        initObj.cWidth = initObj.width - initObj.cMargin * 2 - initObj.cSpace;\n        initObj.originX = initObj.cMargin + initObj.cSpace;\n        initObj.originY = initObj.cMargin + initObj.cHeight;\n        //     // 柱状图信息\n        initObj.tobalBars = params.dataArr.length;\n\n        initObj.bWidth = parseInt(initObj.cWidth / initObj.tobalBars - initObj.bMargin + '');\n        for (var i = 0; i < params.dataArr.length; i++) {\n            var barVal = parseInt(params.dataArr[i][1]);\n            if (barVal > initObj.maxValue) {\n                initObj.maxValue = barVal;\n            }\n        }\n        initObj.maxValue += 50;\n        // //柱状图渐变色\n        initObj.gradient = ctx.createLinearGradient(0, 0, 0, 300);\n        initObj.gradient.addColorStop(0, 'green');\n        initObj.gradient.addColorStop(1, 'rgba(67,203,36,1)');\n\n        drawLineLabelMarkers(ctx, initObj)\n        // 绘制标记\n        drawMarkers(ctx, params.dataArr, initObj)\n        //绘制柱形图\n        drawBarAnimate(ctx, params.dataArr, initObj, false); // 绘制柱状图的动画\n        //检测鼠标移动\n        // var mouseTimer: any = null;\n        // initObj.myCanvas.addEventListener(\"touchmove\", function (e) {\n        //     e = e || window.event;\n        //     if (e.layerX || e.layerX == 0) {\n        //         initObj.mousePosition.x = e.layerX;\n        //         initObj.mousePosition.y = e.layerY;\n        //     } else if (e.offsetX || e.offsetX == 0) {\n        //         initObj.mousePosition.x = e.offsetX;\n        //         initObj.mousePosition.y = e.offsetY;\n        //     }\n\n        //     clearTimeout(mouseTimer);\n        //     mouseTimer = setTimeout(function () {\n        //         ctx.clearRect(0, 0, initObj.width, initObj.height);\n        //         drawLineLabelMarkers(ctx, initObj)\n        //         drawBarAnimate(ctx, dataArr, initObj, true); // 绘制柱状图的动画\n        //     }, 10);\n        // });\n        //点击刷新图表\n        // initObj.myCanvas.ontouchstart = function () {\n        //     // initChart(); // 图表初始化\n        //     // drawLineLabelMarkers(); // 绘制图表轴、标签和标记\n        //     // drawBarAnimate(); // 绘制折线图的动画\n        // };\n        ctx.draw()\n    }\n\n\n    // 绘制图表轴、标签和标记\n    function drawLineLabelMarkers(ctx, initObj) {\n        const { originX, originY, cMargin, cWidth } = initObj\n        ctx.translate(0.5, 0.5);  // 当只绘制1像素的线的时候，坐标点需要偏移，这样才能画出1像素实线\n        ctx.font = \"12px Arial\";\n        ctx.lineWidth = 1;\n        ctx.fillStyle = \"#000\";\n        ctx.strokeStyle = \"#000\";\n        // y轴\n        drawLine(ctx, originX, originY, originX, cMargin);\n        // x轴\n        drawLine(ctx, originX, originY, originX + cWidth, originY)\n        ctx.translate(-0.5, -0.5);  // 还原位置\n    }\n\n    // 画线的方法\n    function drawLine(ctx, x, y, X, Y) {\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n        ctx.lineTo(X, Y);\n        ctx.stroke();\n        ctx.closePath();\n    }\n\n    // 绘制标记\n    function drawMarkers(ctx, dataArr, initObj) {\n        const { width, xTitle, yTitle, maxValue, totalYNomber, originX, cHeight, cMargin, cSpace, cWidth, tobalBars, bMargin, bWidth, originY } = initObj\n        ctx.strokeStyle = \"#E0E0E0\";\n        // 绘制 y\n        let oneVal = parseInt(maxValue / totalYNomber + '');\n        ctx.textAlign = \"right\";\n        ctx.font = \"10px Calibri\";\n        for (var i = 0; i <= totalYNomber; i++) {\n            let markerVal = Math.floor(i * oneVal / 100) * 100;\n            // let markerVal = i * oneVal;\n            let xMarker = originX - 5;\n            let yMarker = parseInt(cHeight * (1 - markerVal / maxValue) + '') + cMargin;\n            ctx.fillText(markerVal, xMarker, yMarker + 3, cSpace); // 文字\n            if (i > 0) {\n                drawLine(ctx, originX, yMarker, originX + cWidth, yMarker);\n            }\n        }\n        // 绘制 x\n        ctx.textAlign = \"center\";\n        for (var i = 0; i < tobalBars; i++) {\n            let markerVal = dataArr[i][0];\n            var xMarker = parseInt(originX + cWidth * (i / tobalBars) + bMargin + bWidth / 2);\n            var yMarker = originY + 15;\n            ctx.fillText(markerVal, xMarker, yMarker, cSpace); // 文字\n        }\n        // 绘制标题 y\n        ctx.save();\n        ctx.rotate(-Math.PI / 2);\n        ctx.fillText(yTitle, -width / 2 - 50, cSpace - 8);\n        ctx.restore();\n        // 绘制标题 x\n        ctx.fillText(xTitle, originX + cWidth / 2, originY + 30);\n    };\n\n    //绘制柱形图\n    function drawBarAnimate(ctx, dataArr, initObj, isMouseMove = false) {\n        let { canvas, width, cMargin, cSpace, tobalBars, maxValue, totalYNomber, cHeight, originX, originY, bWidth, bMargin, gradient, mousePosition } = initObj\n        let space: number = 0;\n        for (var i = 0; i < tobalBars; i++) {\n            var oneVal = parseInt(maxValue / totalYNomber + '');\n            var barVal = dataArr[i][1];\n            // var barH = parseInt(cHeight * barVal / maxValue * ctr / numctr + '');\n            var barH = parseInt(cHeight / maxValue * barVal + '');\n            var y = originY - barH;\n            var x = originX + (bWidth + bMargin) * i + bMargin;\n            space = (width - cMargin * 2 - cSpace * 2 - ((dataArr.length + 1) * 10)) / dataArr.length / 2\n            drawRect(canvas, ctx, x, y, bWidth, barH, mousePosition, gradient, isMouseMove);  //高度减一避免盖住x轴\n            ctx.fillText(barVal, x + space, y - 8); // 文字\n        }\n        // if (ctr < numctr) {\n        //     ctr++;\n        //     setTimeout(function () {\n        //         ctx.clearRect(0, 0, width, height);\n        //         drawLineLabelMarkers(ctx, initObj);\n        //         drawBarAnimate(ctx, dataArr, initObj);\n        //     }, speed);\n        // }\n    }\n\n    //绘制方块\n    function drawRect(canvas, ctx, x, y, X, Y, mousePosition, gradient, mouseMove) {\n        ctx.beginPath();\n        ctx.rect(x, y, X, Y);\n        if (mouseMove && canvas.isPointInPath(mousePosition.x, mousePosition.y)) { //如果是鼠标移动的到柱状图上，重新绘制图表\n            ctx.fillStyle = \"green\";\n        } else {\n            ctx.fillStyle = gradient;\n            ctx.strokeStyle = gradient;\n        }\n        ctx.fill();\n        ctx.closePath();\n    }\n\n    function move(e) {\n        console.log(e)\n    }\n\n    return useObserver(() => (\n        <View className='container'>\n            <Canvas style={{ width: defaultState.screenWidth, height: defaultState.screenHeight }} canvasId='Histogram' onLongTap={(e) => { move(e) }}></Canvas>\n        </View >\n    ))\n}\nexport default ChartView\n","// extracted by mini-css-extract-plugin","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../node_modules/@tarojs/mini-runner/node_modules/babel-loader/lib/index.js!./index.tsx\"\nvar config = {};\n\n\nvar inst = Page(createPageConfig(component, 'pages/chartview/index', {}, config || {}))\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AADA;AAGA;AAAA;AADA;AAFA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AAnBA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AACA;AAqBA;AACA;AADA;AAGA;AA5BA;AACA;AACA;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA1GA;AACA;AACA;AA6GA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1HA;AACA;AACA;AA4HA;AACA;AACA;AACA;AACA;AACA;AAnIA;AACA;AACA;AAqIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAfA;AACA;AACA;AAgBA;AACA;AAAA;AACA;AACA;AACA;AACA;AAvBA;AACA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxKA;AACA;AAyKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAZA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhMA;AACA;AACA;AAiMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AApNA;AACA;AAyNA;;;;;;;;;;;ACtOA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}